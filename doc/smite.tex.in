%
% The definition of @PACKAGE_NAME@ (self-contained paper)
%
% Reuben Thomas
%
% Started 1/6-29/10/93
%

\documentclass[a4paper]{article}
\usepackage[british]{babel}
\usepackage[utf8x]{inputenc}
\usepackage{newpxtext,booktabs,hyperref}


% Macros for this document

% Font for stack pictures; macro \spic includes italic correction

\newcommand{\spic}[1]{\texttt{\textsl{#1\/}}}

% Common stack items

\newcommand{\x}[1]{\spic{x$_{#1}$}}
\newcommand{\n}[1]{\spic{n$_{#1}$}}
\newcommand{\U}[1]{\spic{u$_{#1}$}}
\newcommand{\noru}[1]{\spic{n$_#1${\tt |}u$_{#1}$}}
\newcommand{\addr}[1]{\spic{addr$_{#1}$}}

% Lay out an action definition

% Define the widths of the stack effect and description columns
\newlength{\itemwidth}\itemwidth=\textwidth \advance\itemwidth by -0.1in
\newlength{\instname}\instname=1.5in
\newlength{\stackcom}\stackcom=3.0in
\newlength{\beforestackcom} \advance\beforestackcom by \instname

\newcommand{\inst}[3]{\item[]\parbox{\itemwidth}%
{\makebox[\instname][l]{\tt #1}%
\makebox[\stackcom][r]{\tt ( \spic{#2} )}\\[0.5ex]#3}}

% Lay out an external interface call

\newlength{\innerwidth}\innerwidth=\itemwidth \advance\innerwidth by -0.5in
\newcommand{\iface}[4]{\item[]\parbox{\itemwidth}{{\bf #1} ({\it #2}\/) :
#3\\[0.5ex]\hspace*{0.4in}\parbox{\innerwidth}{#4}}}

% Lay out a line of the opcode table

\newcommand{\opcodetbl}[4]{0x#1 & {\tt #2} & 0x#3 & {\tt #4} \\}
\newcommand{\opcodetblone}[2]{0x#1 & {\tt #2} \\}


\title{The @PACKAGE_NAME@ Virtual Machine}
\author{Reuben Thomas}
\date{13th February 2019}

\begin{document}
\maketitle

\subsection*{Typographical conventions}

Actions and registers are shown in {\tt Typewriter} font;
interface calls are shown in {\bf Bold} type.

Addresses are given in bytes and refer to the VM address space except where
stated. Addresses are written in hexadecimal; hex numbers are prefixed with
“0x”.


\section{Introduction}

@PACKAGE_NAME@ is a simple virtual machine for study and experiment. It is a stack machine, based on the more complex register machine~\cite{mite0}.
This paper gives a full description of @PACKAGE_NAME@.

@PACKAGE_NAME@ is conceptually (and usually in fact) a library, embedded in other programs; it supports a simple object module format.


\section{Architecture}

@PACKAGE_NAME@'s address unit is the byte, which is eight bits.
Words are {\tt WORD\_SIZE} bytes. The word is the size of the numbers
and addresses on which @PACKAGE_NAME@ operates, and of the items placed on the stacks.
The size of the byte and range of word sizes allowed have been chosen with a view to making efficient implementation possible on the vast majority of current machine architectures.

Words may have the bytes stored in big-endian or little-endian order. The
address of a word is that of the byte in it with the lowest address.


\subsection{Registers}
\label{registers}

The registers, each with its function, are set out in table~\ref{regtable}.

\begin{table}[htbp]
\begin{center}
\begin{tabular}{cp{3.75in}} \toprule
\bf Register & \bf Function \\
 \midrule
{\tt PC} & The {\tt P}rogram {\tt C}ounter. Points to the next byte from which an instruction may be loaded. \\
{\tt ITYPE} & The type of an instruction to be executed: $0$ for a number, and $1$ for an action. \\
{\tt I} & The {\tt I}nstruction. Holds the opcode of an instruction to be executed. \\
{\tt STACK\_DEPTH} & The number of items on the stack. \\
{\tt ENDISM} & The endianness of @PACKAGE_NAME@: 0 = Little-endian, 1 = Big-endian. \\
{\tt WORD\_SIZE} & The number of bytes in a word. Must be in the range $2$ to $32$ inclusive, and a power of $2$. \\
 \bottomrule
\end{tabular}
\caption{\label{regtable}Registers}
\end{center}
\end{table}

The registers are word quantities.

To ease efficient implementation, the registers may only be accessed
by actions (see section~\ref{registeract}); not all registers are accessible, and only a few are writable.


\subsection{Memory}

@PACKAGE_NAME@'s memory is a contiguous sequence of bytes with addresses starting at $0$.


\subsection{Stack}

The stack is a LIFO stacks of words used for passing values to actions and routines and for holding subroutine return addresses. To {\bf push} an item on to
the stack means to add a new item to the top of the stack, increasing the stack depth by $1$; to {\bf pop} an item means to reduce the stack depth by $1$. Actions that change the number of items on the stack implicitly pop their arguments and push their results.


\subsection{Operation}
\label{operation}

Before @PACKAGE_NAME@ is started, {\tt ENDISM} should be set to $0$ or $1$ according to the implementation, and {\tt WORD\_SIZE} to the appropriate value. The other registers should be initialised to~$0$.

{\tt ENDISM} and {\tt WORD\_SIZE} must not change while @PACKAGE_NAME@ is executing.

@PACKAGE_NAME@ is started by a call to the interface calls {\bf run()} or {\bf
single\_step()} (see section~\ref{calls}). In the former case, the execution
cycle is entered:

\begin{tabbing}
\hspace{0.5in}\=begin\=\+\+ \\*
decode the next instruction into {\tt I} from the bytes at {\tt PC} \\*
execute the instruction in {\tt I} \\*
on successful completion, set {\tt PC} to point to the next instruction \- \\*
repeat
\end{tabbing}

In the latter case, the contents of the execution cycle is executed once, and
control returns to the calling program.

Note that the calls {\bf run()} and {\bf single\_step()} do not perform the
initialisation specified above.


\subsection{Errors and termination}
\label{errors}

When @PACKAGE_NAME@ encounters certain abnormal situations, such as an attempt to access an invalid address, or divide by zero, an {\bf error} is {\bf raised}, and execution terminates; an {\bf error code} is returned to the caller. The instruction that caused the error to be raised is considered not to have executed, and {\texttt PC} still points to it.

Execution can also be terminated explicitly by performing a {\tt HALT} action (see section~\ref{erroract}), which also returns a code. The {\tt HALT} action {\it is} considered to have completed.

Error codes are signed numbers. Conventionally, negative numbers are considered to represent error conditions, and non-negative numbers (in particular, zero) successful termination. $-1$ to $-128$ are reserved for @PACKAGE_NAME@'s own error codes; the meanings of
those that may be raised by @PACKAGE_NAME@ are shown in
table~\ref{errortable}.

\begin{table}[htbp]
\begin{center}
\begin{tabular}{cp{4in}} \toprule
\bf Code & \bf Meaning \\ \midrule
$-1$ & Invalid opcode (see section~\ref{opcodes}). \\
$-2$ & Invalid address: raised when an instruction attempts to read from or write to an invalid address. \\
$-3$ & Address alignment error: raised when an instruction expecting a word-aligned address is given a valid but non-aligned address. \\
$-4$ & Division by zero attempted (see section~\ref{arithmetic}). \\
$-128$ & {\bf single\_step()} has terminated without error. \\
 \bottomrule
\end{tabular}
\caption{\label{errortable}Errors raised by @PACKAGE_NAME@}
\end{center}
\end{table}


\section{Instruction set}
\label{instset}

The instruction set is listed in sections~\ref{numbers} to~\ref{accessact},
with the instructions grouped according to function. The
instructions are given in the following format:

\begin{description}
\inst{NAME}{before — after}{Description.}
\end{description}

The first line consists of the name of the instruction. On the right is the
stack effect, which shows the effect of the instruction on the stack.
Underneath is the description.

{\bf Stack effects} are written

\centerline{\tt ( \spic{before — after} )}

\noindent where \spic{before} and \spic{after} are stack pictures showing the items on top
of a stack before and after the instruction is executed.
An instruction only affects the items shown in its
stack effects. The brackets and dashes serve merely to delimit the stack
effect and to separate \spic{before} from \spic{after}. {\bf Stack pictures}
are a representation of the top-most items on the stack, and are written

\centerline{\spic{i$_1$ i$_2$\dots i$_{n-1}$ i$_n$}}

\noindent where the \spic{i$_k$} are stack items, each of which occupies a whole number of
words, with \spic{i$_n$} being on top of the stack. The symbols denoting
different types of stack item are shown in table~\ref{typetable}.

\begin{table}[htbp]
\begin{center}
\begin{tabular}{cl} \toprule
\bf Symbol & \bf Data type \\ \midrule
\spic{flag} & a Boolean flag, $1$ for true and $0$ for false \\
\spic{byte} & byte \\
\spic{n} & signed number \\
\spic{u} & unsigned number \\
\spic{n{\tt |}u} & number (signed or unsigned) \\
\spic{x} & unspecified word \\
\spic{addr} & address \\
\spic{a-addr} & word-aligned address \\
\bottomrule
\end{tabular}
\caption{\label{typetable}Types used in stack effects}
\end{center}
\end{table}

Types are only used to indicate how instructions treat their arguments and
results; @PACKAGE_NAME@ does not distinguish between stack items of different types. In
stack pictures the most general argument types with which each instruction can
be supplied are given; subtypes may be substituted. Using the phrase ``$i
\Rightarrow j$'' to denote ``$i$\/ is a subtype of $j$\/'', table~\ref{reltable}
shows the subtype relationships. The subtype relation is transitive.

\begin{table}[htbp]
\begin{center}
\begin{tabular}{c} \toprule
\spic{u} $\Rightarrow$ \spic{x} \\
\spic{n} $\Rightarrow$ \spic{x} \\
\spic{flag} $\Rightarrow$ \spic{u} \\
\spic{byte} $\Rightarrow$ \spic{u} \\
\spic{a-addr} $\Rightarrow$ \spic{addr} $\Rightarrow$ \spic{u} \\
 \bottomrule
\end{tabular}
\caption{\label{reltable}The subtype relation}
\end{center}
\end{table}

Numbers are represented in twos complement form. \spic{addr} consists of all
valid virtual machine addresses. Numeric constants can be included in
stack pictures, and are of type \spic{n{\tt |}u}.

Each type may be suffixed by a number in stack pictures; if the same combination
of type and suffix appears more than once in a stack effect, it refers to
identical stack items. Alternative \spic{after} pictures are separated by ``{\tt
|}'', and the circumstances under which each occurs are detailed in the
instruction description.

The symbols \spic{i*x} and \spic{j*x} are used to denote different
collections of zero or more words of any data type. Ellipsis is used for
indeterminate numbers of specified types of word.


\subsection{Numbers}
\label{numbers}

\begin{description}
\inst{number}{— n}{The number is pushed on to the stack.}
\end{description}


\subsection{Errors}
\label{erroract}

This action raises an error (see section~\ref{errors}):

\nopagebreak
\begin{description}
\inst{HALT}{x —}{Stop @PACKAGE_NAME@, returning reason code \spic{x} to the calling program (see section~\ref{calls}).}
\end{description}


\subsection{Stack manipulation}

These actions manage the stack:

\nopagebreak
\begin{description}
\inst{POP}{\x{u}\dots\x1 u —}{Remove \spic{u} items from the stack.}
\inst{DUP}{\x{u}\dots\x0 u — \x{u}\dots\x0 \x{u}}{Remove \spic{u}. Copy \x{u} to the top of the stack.}
\inst{SWAP}{\x{u}\dots\x0 u — \x0\x{u-1}\dots\x1 \x{u}}{Exchange the top stack item with the \spic{u}th. If \spic{u} is zero, do nothing.}
\inst{ROTATE}{\x{n}\dots\x0 n — \x{n-1}\dots\x1 \x{+n} \textrm{|} \x0 \x{n}\dots\x1}{If \spic{n} is non-negative, rotate the \spic{n}th stack item to the top; otherwise, rotate the top stack item to position \spic{n}.}
\end{description}


\subsection{Comparison}

These words compare two numbers (or, for equality tests, any two words) on the
stack, returning a flag:

\nopagebreak
\begin{description}
\inst{EQ}{\x1 \x2 — flag}{\spic{flag} is true if and only if \x1 is bit-for-bit the same as \x2.}
\inst{LT}{\n1 \n2 — flag}{\spic{flag} is true if and only if \n1 is less than \n2.}
\inst{ULT}{\U1 \U2 — flag}{\spic{flag} is true if and only if \U1 is less than \U2.}
\end{description}


\subsection{Arithmetic}
\label{arithmetic}

These actions consist of monadic and dyadic operators.
All calculations are made without bounds or overflow checking, except
as detailed for certain actions.

Negation and addition:

\nopagebreak
\begin{description}
\inst{NEGATE}{\n1 — \n2}{Negate \n1, giving its arithmetic inverse \n2.}
\inst{ADD}{\noru1 \noru2 — \noru3}{Add \noru2 to \noru1, giving the sum \noru3.}
\end{description}

Multiplication and division (note that all division actions raise error
$-4$ if division by zero is attempted):

\nopagebreak
\begin{description}
\inst{MUL}{\noru1 \noru2 — \noru3}{Multiply \noru1 by \noru2 giving the product \noru3.}
\inst{DIVMOD}{\n1 \n2 — \n3 \n4}{Divide \n1 by \n2 using symmetric division, giving the single-word quotient \n3 and the single-word remainder \n4. The quotient is rounded towards zero.}
\inst{UDIVMOD}{\U1 \U2 — \U3 \U4}{Divide \U1 by \U2, giving the single-word quotient \U3 and the single-word remainder \U4.}
\end{description}


\subsection{Logic and shifts}

Shifts:

\nopagebreak
\begin{description}
\inst{LSHIFT}{\x1 u — \x2}{Perform a logical left shift of \spic{u} bit-places on \x1, giving \x2. Put zero into the least significant bits vacated by the shift. If \spic{u} is greater than or equal to the number of bits in a word, \x2 is zero.}
\inst{RSHIFT}{\x1 u — \x2}{Perform a logical right shift of \spic{u} bit-places on \x1, giving \x2. Put zero into the most significant bits vacated by the shift. If \spic{u} is greater than or equal to the number of bits in a word, \x2 is zero.}
\inst{ARSHIFT}{\x1 u — \x2}{Perform an arithmetic right shift of \spic{u} bit-places on \x1, giving \x2. Copy the original most-significant bits into the most significant bits vacated by the shift. If \spic{u} is greater than or equal to the number of bits in a word, all the bits of \x2 are the same as the original most-significant bit.}
\end{description}

Logic functions:

\nopagebreak
\begin{description}
\inst{NOT}{\x1 — \x2}{Invert all bits of \x1, giving its logical inverse \x2.}
\inst{AND}{\x1 \x2 — \x3}{\x3 is the bit-by-bit logical ``and'' of \x1 with \x2.}
\inst{OR}{\x1 \x2 — \x3}{\x3 is the bit-by-bit inclusive-or of \x1 with \x2.}
\inst{XOR}{\x1 \x2 — \x3}{\x3 is the bit-by-bit exclusive-or of \x1 with \x2.}
\end{description}


\subsection{Memory}

These actions fetch and store words and bytes to and from memory; there is
also an action to add a number to another stored in memory:

\nopagebreak
\begin{description}
\inst{LOAD}{a-addr — x}{\spic{x} is the value stored at \spic{a-addr}.}
\inst{STORE}{x a-addr —}{Store \spic{x} at \spic{a-addr}.}
\inst{LOADB}{addr — byte}{Fetch the byte stored at \spic{addr}. The unused high-order bits are all zeroes.}
\inst{STOREB}{byte addr —}{Store \spic{byte} at \spic{addr}. Only one byte is transferred.}
\end{description}


\subsection{Control}
\label{control}

These actions implement unconditional and conditional branches, and subroutine
call and return (subroutine return is {\tt BRANCH}):

\nopagebreak
\begin{description}
\inst{BRANCH}{addr —}{Set {\tt PC} to \spic{addr}.}
\inst{BRANCHZ}{flag addr —}{If \spic{flag} is false then set {\tt PC} to \spic{addr}.}
\inst{CALL}{\addr1 — \addr2}{Exchange {\tt PC} with the top stack value.}
\end{description}


\subsection{Registers}
\label{registeract}

\begin{description}
\inst{GET\_WORD\_SIZE}{— u}{\spic{u} is the value of {\tt WORD\_SIZE}.}
\inst{GET\_STACK\_DEPTH}{— u}{\spic{u} is the value of {\tt STACK\_DEPTH}, the number of items on the stack.}
\inst{SET\_STACK\_DEPTH}{u —}{Set {\tt STACK\_DEPTH} to \spic{u}.}
\end{description}


\subsection{No-op}

\begin{description}
\inst{NOP}{—}{Do nothing.}
\end{description}


\subsection{Instruction encoding}
\label{encoding}

Actions are encoded as a single byte with the top two bits clear.

Numbers are words encoded by one or more bytes, as follows: the significant bits of the number are split into groups of six bits, starting at the most significant end, and then stored in little-endian order in consecutive bytes. All but the last byte have the seventh bit set and eighth bit clear; the final byte has the eighth bit set, and the seventh bit matches the sign bit.


\subsection{Action opcodes}
\label{opcodes}

Table~\ref{opcodetable} lists the action opcodes in numerical order. Other action opcodes are undefined.

\begin{table}[htb]
\begin{center}
\begin{tabular}{*{2}{cc}} \toprule
\bf Opcode & \bf Action & \bf Opcode & \bf Action \\ \midrule
\opcodetbl{00}{HALT}	{10}{NOT}
\opcodetbl{01}{POP}	{11}{AND}
\opcodetbl{02}{DUP}	{12}{OR}
\opcodetbl{03}{SWAP}	{13}{XOR}
\opcodetbl{04}{ROTATE}	{14}{LOAD}
\opcodetbl{05}{EQ}	{15}{STORE}
\opcodetbl{06}{LT}	{16}{LOADB}
\opcodetbl{07}{ULT}	{17}{STOREB}
\opcodetbl{08}{NEGATE}	{18}{BRANCH}
\opcodetbl{09}{ADD}	{19}{BRANCHZ}
\opcodetbl{0a}{MUL}	{1a}{CALL}
\opcodetbl{0b}{DIVMOD}	{1b}{GET\_WORD\_SIZE}
\opcodetbl{0c}{UDIVMOD}	{1c}{GET\_STACK\_DEPTH}
\opcodetbl{0d}{LSHIFT}	{1d}{SET\_STACK\_DEPTH}
\opcodetbl{0e}{RSHIFT}	{1e}{NOP}
\opcodetblone{0f}{ARSHIFT}
 \bottomrule
\end{tabular}
\caption{\label{opcodetable}Action opcodes}
\end{center}
\end{table}


\section{External interface}

@PACKAGE_NAME@'s external interface comes in three parts. The calling interface allows
@PACKAGE_NAME@ to be controlled by other programs. The {\tt EXTRA} action (see section~\ref{accessact}) allows implementations to provide access to system facilities, previously written code,
code written in other languages, and the speed of machine code in time-critical
situations. The object module format allows compiled code to be saved, reloaded
and shared between systems.


\subsection{Object module format}
\label{object}

The object module starts with the ASCII codes of the letters
``@PACKAGE@'' padded to eight bytes by ASCII NULs (0x00), then values of
the {\tt ENDISM} and {\tt WORD\_SIZE} registers of the system which saved the module, then the number of bytes the code occupies. These values are all encoded as in section~\ref{encoding}. Then follows the code.

Object modules have a simple structure, as they are only intended for loading an
initial memory image into @PACKAGE_NAME@.


\subsection{Calling interface}
\label{calls}

The calling interface is difficult to specify with the same precision as the
rest of @PACKAGE_NAME@, as it may be implemented in any language. However, since only
basic types are used, and the semantics are simple, it is expected that
implementations in different language producing the same result will be easy to
program. A Modula-like syntax is used to give the definitions here.
Implementation-defined error codes must be documented, but are optional. All
addresses passed as parameters must be word-aligned. An implementation of @PACKAGE_NAME@ must provide the
following calls:

\begin{description}
\iface{run}{}{integer}{Start @PACKAGE_NAME@ by entering the execution cycle as
    described in section~\ref{operation}. If @PACKAGE_NAME@ ever executes a {\tt
    HALT} action (see section~\ref{erroract}), the reason code is
    returned as the result.}
\iface{single\_step}{}{integer}{Execute a single pass of the execution
    cycle. If an error is raised, it is returned; otherwise, return $-128$.}
\iface{load\_object}{file, address}{integer}{Load the object module
    given by the file descriptor \textit{file}, which may be a filename or some other
    specifier, to the VM address \textit{address}. If the module is invalid, then return $-2$. If the module cannot be loaded by the current implementation (for example, the word size or {\tt ENDISM} is incompatible), return $-3$. If the code will not fit into memory at the address given, or the address is out of range or unaligned, return $-4$. Otherwise load the code into
    memory, converting it if the endianness value is different from the current
    value of {\tt ENDISM}. The result is the length of the code in bytes if successful, and $-1$ if there is a filing system or other error.}
  \iface{save\_object}{file, address, length}{integer}{Save the area of memory
    specified by \textit{address} and \textit{length} to the file descriptor given by \textit{file}. On success, $0$ is returned. If the address or length are invalid, the return code is $-2$. If a file system error occurs, the return code is $-1$.}
\end{description}

@PACKAGE_NAME@ must also provide access to its registers and address space through
appropriate data objects.


\section*{Acknowledgements}

Martin Richards's demonstration of his BCPL-oriented Cintcode virtual machine~\cite{cintweb}
convinced me it was going to be fun working on virtual machines. He also supervised my BA dissertation project, Beetle~\cite{beetledis}, on which @PACKAGE_NAME@ is based.

\bibliographystyle{plain}
\bibliography{vm,rrt}


\end{document}

% LocalWords:  discontiguous Richards's
