%
% The definition of @PACKAGE_NAME@ (self-contained paper)
%
% Reuben Thomas
%
% Started 1/6-29/10/93
%

\documentclass{article}
\usepackage[british]{babel}
\usepackage[utf8x]{inputenc}
\usepackage{a4,newpxtext,booktabs,hyperref}


% Macros for this document

% Font for stack pictures; macro \spic includes italic correction

\newfont{\spfont}{cmsltt10 scaled 1000}
\newcommand{\spic}[1]{{\spfont\setlength{\baselineskip}{\normalbaselineskip}#1\/}}

% Common stack items

\newcommand{\x}[1]{\spic{x$_{#1}$}}
\newcommand{\n}[1]{\spic{n$_{#1}$}}
\newcommand{\U}[1]{\spic{u$_{#1}$}}
\newcommand{\noru}[1]{\spic{n$_#1${\tt |}u$_{#1}$}}
\newcommand{\aaddr}[1]{\spic{a-addr$_{#1}$}}

% Lay out an instruction definition

% Define the widths of the stack effect and description columns
\newlength{\itemwidth}\itemwidth=\textwidth \advance\itemwidth by -0.1in
\newlength{\instname}\instname=1.5in
\newlength{\stackcom}\stackcom=3.0in
\newlength{\beforestackcom} \advance\beforestackcom by \instname

% With no return stack
\newcommand{\inst}[3]{\item[]\parbox{\itemwidth}%
{\makebox[\instname][l]{\tt #1}%
\makebox[\stackcom][r]{\tt ( \spic{#2} )}\\[0.5ex]#3}}

% With return stack
\newcommand{\instr}[4]{\item[]\parbox{\itemwidth}%
{\makebox[\instname][l]{\tt #1}%
\makebox[\stackcom][r]{\tt ( \spic{#2} )}\\\makebox[\beforestackcom]{}%
\makebox[\stackcom][r]{\tt R: ( \spic{#3} )}\\[0.5ex]#4}}

% Lay out an external interface call

\newlength{\innerwidth}\innerwidth=\itemwidth \advance\innerwidth by -0.5in
\newcommand{\iface}[4]{\item[]\parbox{\itemwidth}{{\bf #1} ({\it #2}\/) :
#3\\[0.5ex]\hspace*{0.4in}\parbox{\innerwidth}{#4}}}

% Lay out a line of the opcode table

\newcommand{\opcodetbl}[6]{0x#1 & {\tt #2} & 0x#3 & {\tt #4} & 0x#5 & {\tt #6}
\\}
\newcommand{\opcodetbltwo}[4]{0x#1 & {\tt #2} & 0x#3 & {\tt #4} \\}


\title{The @PACKAGE_NAME@ Virtual Machine}
\author{Reuben Thomas}
\date{13th September 2018}

\begin{document}
\maketitle

\subsection*{Typographical conventions}

Instructions and @PACKAGE_NAME@'s registers are shown in {\tt Typewriter} font;
interface calls are shown in {\bf Bold} type, and followed by empty parentheses.

Addresses are given in bytes and refer to @PACKAGE_NAME@'s address space except where
stated. Addresses are written in hexadecimal; hex numbers are prefixed with
“0x”.


\section{Introduction}

@PACKAGE_NAME@ is a simple virtual machine for study and experiment. It is a stack machine, based on the more complex register machine~\cite{mite0}.
This paper gives a full description of @PACKAGE_NAME@, but
certain implementation-dependent features, such as the size of the stacks, are
purposely left unspecified, and the exact method of implementation is left to
the implementor in many particulars.

@PACKAGE_NAME@ is self-contained. Machine
code routines on the host computer may be accessed using the {\tt CALL\_NATIVE}
instruction, which can also be used to implement I/O (see~\ref{accessinst}). @PACKAGE_NAME@ supports a simple object module format.

@PACKAGE_NAME@ is conceptually (and usually in fact) a library, embedded in other programs.
A small interface is provided for other programs to control @PACKAGE_NAME@.


\section{Architecture}

@PACKAGE_NAME@'s address unit is the byte, which is eight bits.
Words are four bytes. The word is the size of the numbers
and addresses on which @PACKAGE_NAME@ operates, and of the items placed on the stacks.
The word size is fixed to ensure compatibility of object code between
implementations on different machines; the size of the byte
and word have been chosen with a view to making efficient implementation of
@PACKAGE_NAME@ possible on the vast majority of current machine architectures.

Words may have the bytes stored in big-endian or little-endian order. The
address of a word is that of the byte in it with the lowest address.


\subsection{Registers}
\label{registers}

The registers, each with its function, are set out in table~\ref{regtable}.

\begin{table}[htbp]
\begin{center}
\begin{tabular}{cp{3.75in}} \toprule
\bf Register & \bf Function \\
    \midrule
{\tt PC} & The {\tt P}rogram {\tt C}ounter. Points to the next
    byte from which an instruction may be loaded. \\
{\tt I} & The {\tt I}nstruction. Holds the opcode of an instruction
    to be executed. \\
{\tt MEMORY} & The size in bytes of @PACKAGE_NAME@'s main memory,
    which must be a whole number of words. \\
{\tt SP} & The data {\tt S}tack {\tt P}ointer. \\
{\tt RP} & The {\tt R}eturn stack {\tt P}ointer. \\
{\tt S0} & The data {\tt S}tack base. \\
{\tt R0} & The {\tt R}eturn stack base. \\
{\tt SSIZE} & The number of words allocated for the data stack. \\
{\tt RSIZE} & The number of words allocated for the return stack. \\
{\tt HANDLER} & The address placed in {\tt PC} by a {\tt THROW}
    instruction. \\
{\tt ENDISM} & The endianness of @PACKAGE_NAME@: 0 = Little-endian,
    1 = Big-endian. \\
{\tt BADPC} & The contents of {\tt PC} when the last exception
    was raised. \\
{\tt INVALID} & The last address which caused an address
    exception. \\ \bottomrule
{\tt PSIZE} & The number of words in a host machine pointer (for {\tt CALL\_NATIVE}; see section~\ref{accessinst}). \\
\end{tabular}
\caption{\label{regtable}@PACKAGE_NAME@'s registers}
\end{center}
\end{table}

All of the registers are word quantities except for {\tt I} and {\tt ENDISM}, which are one byte.

To ease efficient implementation, the registers may only be accessed
by instructions (see section~\ref{registerinst}); not all registers are accessible, and only a few are writable.


\subsection{Memory}

@PACKAGE_NAME@'s memory is a discontiguous sequence of bytes with addresses in the range $0$ to $2^{32}-1$. Some locations may be read-only. The memory is contiguous in the range $0$ to {\tt MEMORY}~$-$~1; this part is referred to as ``main memory''.

\subsection{Stacks}

The data and return stacks are word-aligned LIFO stacks of words. The stack
pointers point to the top stack item on each stack. To {\bf push} an item on to
a stack means to store the item in the word beyond the stack pointer and then
adjust the pointer to point to it; to {\bf pop} an item means to make the
pointer point to the second item on the stack. Instructions that change the number of items on a
stack implicitly pop their arguments and push their results.

The data stack is used for passing values to instructions and routines and the
return stack for holding subroutine return addresses. The return stack may be used for other
operations subject to the restrictions placed on it by its normal usage: it must
be returned before a {\tt RET} instruction to the state it was in directly
after the corresponding {\tt CALL}.

In what follows, for ``the stack'' read ``the data stack''; the return stack is
always mentioned explicitly.


\subsection{Operation}
\label{operation}

Before @PACKAGE_NAME@ is started, {\tt ENDISM} should be set to $0$ or $1$ according to the implementation, and {\tt PSIZE} to the appropriate value. The other registers should be initialised as shown in table~\ref{inittable}, except for {\tt I}, which need not be initialised.

\begin{table}[htbp]
\begin{center}
\begin{tabular}{cc} \toprule
\bf Register & \bf Initial value \\ \midrule
{\tt PC} & 0 \\
{\tt HANDLER} & 0 \\
{\tt BADPC} & {0xffffffff} \\
{\tt INVALID} & {0xffffffff} \\ \bottomrule
\end{tabular}
\caption{\label{inittable}Registers with prescribed initial values}
\end{center}
\end{table}

{\tt MEMORY}, {\tt ENDISM} and {\tt PSIZE} must not change while @PACKAGE_NAME@ is executing.

@PACKAGE_NAME@ is started by a call to the interface calls {\bf run()} or {\bf
single\_step()} (see section~\ref{calls}). In the former case, the execution
cycle is entered:

\begin{tabbing}
\hspace{0.5in}\=begin\=\+\+ \\*
load {\tt I} from the byte pointed to by {\tt PC} \\*
add $1$ to {\tt PC} \\*
execute the instruction in {\tt I} \- \\*
repeat
\end{tabbing}

In the latter case, the contents of the execution loop is executed once, and
control returns to the calling program.

The execution loop need not be implemented as a single loop; it  is designed to
be short enough that the contents of the loop can be appended  to the code
implementing each instruction.

Note that the calls {\bf run()} and {\bf single\_step()} do not perform the
initialisation specified above; that must be performed before calling them.


\subsection{Termination}

When @PACKAGE_NAME@ encounters a {\tt HALT} instruction (see section~\ref{exceptinst}),
it returns the top data stack item as the reason code, unless {\tt SP} does not
point to a valid word, in which case reason code $-257$ is returned (see section~\ref{exceptions}).

Reason codes which are also valid exception codes (either reserved (see section~\ref{exceptions})
or user exception codes) should not normally be used. This
allows exception codes to be passed back by an exception handler to the calling
program, so that the calling program can handle certain exceptions without
confusing exception codes and reason codes.


\subsection{Exceptions}
\label{exceptions}

When a {\tt THROW} instruction (see section~\ref{exceptinst}) is executed, an
{\bf exception} is said to have been {\bf raised}. The exception code is the number on top of the
stack at the time the exception is raised. Some exceptions are raised by
other instructions, for example by {\tt DIVMOD} when division by zero is attempted;
these push the exception code on to the stack and then execute a {\tt THROW}.

Exception codes are signed numbers. $-1$ to $-511$ are reserved for @PACKAGE_NAME@'s own exception codes; the meanings
of those that may be raised by @PACKAGE_NAME@ are shown in table~\ref{excepttable}.

\begin{table}[htbp]
\begin{center}
\begin{tabular}{cl} \toprule
\bf Code & \bf Meaning \\ \midrule
$-9$ & Invalid address (see below). \\
$-10$ & Division by zero attempted (see section~\ref{arithmetic}). \\
$-20$ & Attempt to write to a read-only memory location. \\
$-23$ & Address alignment exception (see below). \\
$-256$ & Illegal opcode (see section~\ref{opcodes}). \\ \bottomrule
\end{tabular}
\caption{\label{excepttable}Exceptions raised by @PACKAGE_NAME@}
\end{center}
\end{table}

Exception $-9$ is raised whenever an attempt is made to access an invalid
address, either by an
instruction, or during an instruction fetch (because {\tt PC} contains an
invalid address). Exception $-23$ is raised when an instruction expecting
an address of type \spic{a-addr} (word-aligned) is given a non-aligned address.
When @PACKAGE_NAME@ raises an address exception ($-9$ or $-23$), the offending address
is placed in {\tt INVALID}.

The initial values of {\tt BADPC} and {\tt INVALID} are unlikely to be generated
by an exception, so it may be assumed that if the initial values still hold no
exception has yet occurred.

If {\tt SP} is unaligned when an exception is raised, or putting the code on the
stack would cause {\tt SP} to be out of range, the effect of a {\tt HALT} with
code $-257$ is performed (although the actual mechanics are not, as that too
would involve putting a number on the stack).


\section{Instruction set}
\label{instset}

The instruction set is listed in sections~\ref{stackinst} to~\ref{accessinst},
with the instructions grouped according to function. The
instructions are given in the following format:

\begin{description}
\instr{NAME}{before -- after}{before -- after}{Description.}
\end{description}

The first line consists of the name of the instruction. On the right are the
stack effect or effects, which show the effect of the instruction on the data and return (R) stacks.
Underneath is the description.

{\bf Stack effects} are written

\centerline{\tt ( \spic{before -- after} )}

where \spic{before} and \spic{after} are stack pictures showing the items on top
of a stack before and after the instruction is executed.
An instruction only affects the items shown in its
stack effects. The brackets and dashes serve merely to delimit the stack
effect and to separate \spic{before} from \spic{after}. {\bf Stack pictures}
are a representation of the top-most items on the stack, and are written

\centerline{\spic{i$_1$ i$_2$\dots i$_{n-1}$ i$_n$}}

where the \spic{i$_k$} are stack items, each of which occupies a whole number of
words, with \spic{i$_n$} being on top of the stack. The symbols denoting
different types of stack item are shown in table~\ref{typetable}.

\begin{table}[htbp]
\begin{center}
\begin{tabular}{cl} \toprule
\bf Symbol & \bf Data type \\ \midrule
\spic{flag} & flag \\
\spic{true} & true flag \\
\spic{false} & false flag \\
\spic{byte} & byte \\
\spic{n} & signed number \\
\spic{u} & unsigned number \\
\spic{n{\tt |}u} & number (signed or unsigned) \\
\spic{x} & unspecified word \\
\spic{addr} & address \\
\spic{a-addr} & word-aligned address \\
\bottomrule
\end{tabular}
\caption{\label{typetable}Types used in stack effects}
\end{center}
\end{table}

Types are only used to indicate how instructions treat their arguments and
results; @PACKAGE_NAME@ does not distinguish between stack items of different types. In
stack pictures the most general argument types with which each instruction can
be supplied are given; subtypes may be substituted. Using the phrase ``$i
\Rightarrow j$'' to denote ``$i$\/ is a subtype of $j$\/'', table~\ref{reltable}
shows the subtype relationships. The subtype relation is transitive.

\begin{table}[htbp]
\begin{center}
\begin{tabular}{c} \toprule
\spic{u} $\Rightarrow$ \spic{x} \\
\spic{n} $\Rightarrow$ \spic{x} \\
\spic{byte} $\Rightarrow$ \spic{u} \\
\spic{a-addr} $\Rightarrow$ \spic{addr} $\Rightarrow$ \spic{u} \\
\spic{flag} $\Rightarrow$ \spic{x} \\ \bottomrule
\end{tabular}
\caption{\label{reltable}The subtype relation}
\end{center}
\end{table}

Numbers are represented in twos complement form. \spic{addr} consists of all
valid addresses. Numeric constants can be included in
stack pictures, and are of type \spic{n{\tt |}u}.

Each type may be suffixed by a number in stack pictures; if the same combination
of type and suffix appears more than once in a stack effect, it refers to
identical stack items. Alternative \spic{after} pictures are separated by ``{\tt
|}'', and the circumstances under which each occurs are detailed in the
instruction description.

The symbols \spic{i*x}, \spic{j*x} and \spic{k*x} are used to denote different
collections of zero or more words of any data type. Ellipsis is used for
indeterminate numbers of specified types of word.

If an instruction does not modify the return stack, the corresponding stack
picture is omitted.


\subsection{Stack manipulation}
\label{stackinst}

These instructions manage the data stack and move values between stacks.

\begin{description}
\inst{POP}{\x{u}\dots\x1 u --}{Remove \spic{u} items from the stack.}
\inst{PUSH}{\x{u}\dots\x0 u -- \x{u}\dots\x0 \x{u}}{Remove \spic{u}. Copy \x{u} to the top of the stack.}
\inst{SWAP}{\x{u}\dots\x0 u -- \x0\x{u-1}\dots\x1 \x{u}}{Exchange the top stack item with the \spic{u}th. If \spic{u} is zero, do nothing.}
\instr{POP2R}{x --}{-- x}{Move \spic{x} to the return stack.}
\instr{RPOP}{-- x}{x --}{Move \spic{x} from the return stack to the data stack.}
\instr{RPUSH}{u -- \x{u}}{\x{u} \x{u-1}\dots\x{0} -- \x{u} \x{u-1}\dots\x{0}}{Remove \spic{u}. Copy \x{u} to the top of the data stack.}
\end{description}

\subsection{Comparison}

These words compare two numbers (or, for equality tests, any two words) on the
stack, returning a flag, true with all bits set if the test succeeds and false
otherwise.

\begin{description}
\inst{LT}{\n1 \n2 -- flag}{\spic{flag} is true if and only if \n1 is less than \n2.}
\inst{EQ}{\x1 \x2 -- flag}{\spic{flag} is true if and only if \x1 is bit-for-bit the same as \x2.}
\inst{ULT}{\U1 \U2 -- flag}{\spic{flag} is true if and only if \U1 is less than \U2.}
\end{description}


\subsection{Arithmetic}
\label{arithmetic}

These instructions consist of monadic and dyadic operators.
All calculations are made without bounds or overflow checking, except
as detailed for certain instructions.

Addition:

\nopagebreak

\begin{description}
\inst{ADD}{\noru1 \noru2 -- \noru3}{Add \noru2 to \noru1, giving the sum \noru3.}
\end{description}

Multiplication and division (note that all division instructions raise exception
$-10$ if division by zero is attempted):

\nopagebreak

\begin{description}
\inst{MUL}{\noru1 \noru2 -- \noru3}{Multiply \noru1 by \noru2 giving the product \noru3.}
\inst{UDIVMOD}{\U1 \U2 -- \U3 \U4}{Divide \U1 by \U2, giving the single-word quotient \U3 and the single-word remainder \U4.}
\inst{DIVMOD}{\n1 \n2 -- \n3 \n4}{Divide \n1 by \n2 using symmetric division, giving the single-word quotient \n3 and the single-word remainder \n4. The quotient is rounded towards zero.}
\end{description}

Sign function:

\nopagebreak

\begin{description}
\inst{NEGATE}{\n1 -- \n2}{Negate \n1, giving its arithmetic inverse \n2.}
\end{description}


\subsection{Logic and shifts}

These instructions consist of bitwise logical operators and bitwise shifts. The
result of performing the specified operation on the argument or arguments is
left on the stack.

Logic functions:

\nopagebreak

\begin{description}
\inst{INVERT}{\x1 -- \x2}{Invert all bits of \x1, giving its logical inverse \x2.}
\inst{AND}{\x1 \x2 -- \x3}{\x3 is the bit-by-bit logical ``and'' of \x1 with \x2.}
\inst{OR}{\x1 \x2 -- \x3}{\x3 is the bit-by-bit inclusive-or of \x1 with \x2.}
\inst{XOR}{\x1 \x2 -- \x3}{\x3 is the bit-by-bit exclusive-or of \x1 with \x2.}
\end{description}

Shifts:

\nopagebreak

\begin{description}
\inst{LSHIFT}{\x1 u -- \x2}{Perform a logical left shift of \spic{u} bit-places on \x1, giving \x2. Put zero into the least significant bits vacated by the shift. If \spic{u} is greater than or equal to 32, \x2 is zero.}
\inst{RSHIFT}{\x1 u -- \x2}{Perform a logical right shift of \spic{u} bit-places on \x1, giving \x2. Put zero into the most significant bits vacated by the shift. If \spic{u} is greater than or equal to 32, \x2 is zero.}
\end{description}


\subsection{Memory}
\label{memoryinst}

These instructions fetch and store words and bytes to and from memory; there is
also an instruction to add a number to another stored in memory.

\begin{description}
\inst{LOAD}{a-addr -- x}{\spic{x} is the value stored at \spic{a-addr}.}
\inst{STORE}{x a-addr --}{Store \spic{x} at \spic{a-addr}.}
\inst{LOADB}{addr -- byte}{If {\tt ENDISM} is 1, exclusive-or \spic{addr} with 3. Fetch the byte stored at \spic{addr}. The unused high-order bits are all zeroes.}
\inst{STOREB}{byte addr --}{If {\tt ENDISM} is 1, exclusive-or \spic{addr} with 3. Store \spic{byte} at \spic{addr}. Only one byte is transferred.}
\end{description}


\subsection{Registers}
\label{registerinst}

As mentioned in section~\ref{registers}, the stack pointers {\tt SP} and {\tt
RP} may only be accessed through special instructions:

\begin{description}
\inst{PUSH\_SP}{-- a-addr}{\spic{a-addr} is the value of {\tt SP}.}
\inst{STORE\_SP}{a-addr --}{Set {\tt SP} to \spic{a-addr}.}
\inst{PUSH\_RP}{-- a-addr}{\spic{a-addr} is the value of {\tt RP}.}
\inst{STORE\_RP}{a-addr --}{Set {\tt RP} to \spic{a-addr}.}
\inst{PUSH\_PC}{-- addr}{Push {\tt PC} on to the stack.}
\inst{PUSH\_S0}{-- a-addr}{Push {\tt S0} on to the stack.}
\inst{PUSH\_SSIZE}{-- u}{Push {\tt SSIZE} on to the stack.}
\inst{PUSH\_R0}{-- a-addr}{Push {\tt R0} on to the stack.}
\inst{PUSH\_RSIZE}{-- u}{Push {\tt RSIZE} on to the stack.}
\inst{PUSH\_HANDLER}{-- addr}{Push {\tt HANDLER} on to the stack.}
\inst{STORE\_HANDLER}{addr --}{Set {\tt HANDLER} to \spic{addr}.}
\inst{PUSH\_MEMORY}{-- a-addr}{Push {\tt MEMORY} on to the stack.}
\inst{PUSH\_BADPC}{-- addr}{Push {\tt BADPC} on to the stack.}
\inst{PUSH\_INVALID}{-- addr}{Push {\tt INVALID} on to the stack.}
\inst{PUSH\_PSIZE}{-- u}{\spic{u} is the value of {\tt PSIZE}.}
\end{description}


\subsection{Control structures}
\label{control}

These instructions implement unconditional and conditional branches, and subroutine
call and return; there is also a no-op.

No-op:

\nopagebreak

\begin{description}
\inst{NOP}{--}{Do nothing.}
\end{description}

Branches:

\nopagebreak

\begin{description}
\inst{BRANCH}{addr --}{Set {\tt PC} to \spic{addr}.}
\inst{BRANCHZ}{flag addr --}{If \spic{flag} is false then set {\tt PC} to \spic{addr}.}
\end{description}

Subroutine call and return:

\nopagebreak

\begin{description}
\instr{CALL}{\aaddr1 --}{ -- \aaddr2}{Push {\tt PC} on to the return stack, put \spic{\aaddr1} into {\tt PC}.}
\instr{RET}{--}{addr --}{Put \spic{addr} into {\tt PC}.}
\end{description}

\subsection{Literal numbers}
\label{literals}

Literal numbers are word quantities encoded by one or more bytes, as follows: the significant bits of the number are split into groups of six bits, starting at the least significant end. The chunks are stored in consecutive bytes. All but the last byte have the seventh bit set and eighth bit clear; the final byte has the top two bits either both set or both clear, to match the number’s most significant bit.

When a literal is executed, it is pushed on to the stack, and execution resumes at the first byte that did not form part of the number.


\subsection{Exceptions}
\label{exceptinst}

These instructions give access to @PACKAGE_NAME@'s exception mechanisms.

\begin{description}
\inst{THROW}{--}{Put the contents of {\tt PC} into {\tt BADPC}, then load {\tt PC} from {\tt HANDLER}.}
\inst{HALT}{x --}{Stop @PACKAGE_NAME@, returning reason code \spic{x} to the calling program (see section~\ref{calls}). If {\tt SP} is out of range or unaligned, $-257$ is returned as the reason code.}
\end{description}


\subsection{External access}
\label{accessinst}

These instructions allow access to @PACKAGE_NAME@'s libraries, the operating system and native machine code.

\begin{description}
\inst{CALL\_NATIVE}{i*x --}{Make a subroutine call to the routine at the address given (in the host machine's format, padded out to a number of words) on the data stack. The size and format of this address are machine-dependent.}
\inst{EXTRA}{i*x -- j*x}{Perform implementation-dependent actions; for example, this can be used to implement system-dependent functionality such as I/O.}
\end{description}


\subsection{Opcodes}
\label{opcodes}

Table~\ref{opcodetable} lists the opcodes in numerical order. Undefined opcodes raise exception $-256$. Opcodes 0x00–0x7f and 0xc0–0xff are used for literal numbers (see section~\ref{literals}). Other opcodes are undefined.

\begin{table}[htb]
\begin{center}
\begin{tabular}{*{3}{cc}} \toprule
\bf Opcode & \bf Instruction & \bf Opcode & \bf
    Instruction & \bf Opcode & \bf Instruction \\ \midrule
\opcodetbl{80}{NOP}	{90}{AND}       {a0}{EXTRA}
\opcodetbl{81}{POP}	{91}{OR}	{a1}{PUSH\_PSIZE}
\opcodetbl{82}{PUSH}	{92}{XOR}	{a2}{PUSH\_SP}
\opcodetbl{83}{SWAP}	{93}{LSHIFT}	{a3}{STORE\_SP}
\opcodetbl{84}{RPUSH}	{94}{RSHIFT}	{a4}{PUSH\_RP}
\opcodetbl{85}{POP2R}	{95}{LOAD}	{a5}{STORE\_RP}
\opcodetbl{86}{RPOP}	{96}{STORE}	{a6}{PUSH\_PC}
\opcodetbl{87}{LT}	{97}{LOADB}	{a7}{PUSH\_S0}
\opcodetbl{88}{EQ}	{98}{STOREB}	{a8}{PUSH\_SSIZE}
\opcodetbl{89}{ULT}	{99}{BRANCH}	{a9}{PUSH\_R0}
\opcodetbl{8a}{ADD}	{9a}{BRANCHZ}	{aa}{PUSH\_RSIZE}
\opcodetbl{8b}{MUL}	{9b}{CALL}	{ab}{PUSH\_HANDLER}
\opcodetbl{8c}{UDIVMOD}	{9c}{RET}	{ac}{STORE\_HANDLER}
\opcodetbl{8d}{DIVMOD}	{9d}{THROW}	{ad}{PUSH\_MEMORY}
\opcodetbl{8e}{NEGATE}	{9e}{HALT}	{ae}{PUSH\_BADPC}
\opcodetbl{8f}{INVERT}	{9f}{CALL\_NATIVE}	{af}{PUSH\_INVALID}
 \bottomrule
\end{tabular}
\caption{\label{opcodetable}@PACKAGE_NAME@'s opcodes}
\end{center}
\end{table}


\section{External interface}

@PACKAGE_NAME@'s external interface comes in three parts. The calling interface allows
@PACKAGE_NAME@ to be controlled by other programs. The {\tt CALL\_NATIVE} instruction (see section~\ref{accessinst}) allows implementations to provide access to system facilities, previously written code,
code written in other languages, and the speed of machine code in time-critical
situations. The object module format allows compiled code to be saved, reloaded
and shared between systems.


\subsection{Object module format}
\label{object}

The first seven bytes of an object module should be the ASCII codes of the letters
``@PACKAGE@'' padded with ASCII NULs (0x00), then the one-byte contents of
the {\tt ENDISM} register of the system which saved the module. The next word should contain the number of words the code occupies. The number must have
the same endianness as that indicated in the previous byte. Then follows the
code, which must fill a whole number of words.

Object modules have a simple structure, as they are only intended for loading an
initial memory image into @PACKAGE_NAME@.


\subsection{Calling interface}
\label{calls}

The calling interface is difficult to specify with the same precision as the
rest of @PACKAGE_NAME@, as it may be implemented in any language. However, since only
basic types are used, and the semantics are simple, it is expected that
implementations in different language producing the same result will be easy to
program. A Modula-like syntax is used to give the definitions here.
Implementation-defined error codes must be documented, but are optional. All
addresses passed as parameters must be word-aligned. A @PACKAGE_NAME@ must provide the
following calls:

\begin{description}
\iface{native\_address}{integer, boolean}{pointer}{Return a native pointer corresponding
    to the given @PACKAGE_NAME@ address. If the @PACKAGE_NAME@ address is invalid, or the Boolean flag is true and the address is read-only, then a distinguished invalid pointer is returned.}
\iface{run}{}{integer}{Start @PACKAGE_NAME@ by entering the execution cycle as
    described in section~\ref{operation}. If @PACKAGE_NAME@ ever executes a {\tt
    HALT} instruction (see section~\ref{exceptinst}), the reason code is
    returned as the result.}
\iface{single\_step}{}{integer}{Execute a single pass of the execution
    cycle, and return reason code $-259$, unless a {\tt HALT} instruction was
    obeyed (see section~\ref{exceptinst}), in which case the reason code
    passed to it is returned.}
\iface{load\_object}{file, address}{integer}{Load the object module
    specified by \textit{file}, which may be a filename or some other
    specifier, to the @PACKAGE_NAME@ address \textit{address}. First the module's
    header is checked; if the first seven bytes are not as specified above
    in section~\ref{object}, or the endianness value is not 0 or 1, then
    return $-2$. If the code will not fit into memory at the address given, or
    the address is out of range or unaligned, return $-1$. Otherwise load the code into
    memory, converting it if the endianness value is different from the current
    value of {\tt ENDISM}. The result is 0 if successful, and some other
    implementation-defined value if there is a filing system or other error.}
\end{description}

@PACKAGE_NAME@ must also provide access to its registers and address space through
appropriate data objects.


\section*{Acknowledgements}

Martin Richards's demonstration of his BCPL-oriented Cintcode virtual machine~\cite{cintweb}
convinced me it was going to be fun working on virtual machines. He also supervised my BA dissertation project, Beetle, on which @PACKAGE_NAME@ is based.

\bibliographystyle{plain}
\bibliography{vm,rrt}


\end{document}

% LocalWords:  discontiguous Richards's
