How to compile a specialised interpreter
========================================

Step 1: Trace
-------------

First, make a trace file for the program you want to run fast. Currently, this
requires using another version of SMite, e.g. the "master" branch. Run it like
this:

    $ smite --trace /tmp/myprog.trace myprog [arguments]

An empty file is also acceptable as a trace file. Of course it won't make a
very fast interpreter. However, the option of using an empty trace file is
useful for bootstrapping.

Trace files can be slow to generate, so you may want to keep a library of
them. However, trace files can also be very big (hundreds of megabytes per
second of execution). Fortunately, trace files are extremely compressible.
The "zstd" compression tool achieves a 500:1 compression ratio.

Step 2: Predictor
-----------------

The script "predictor.py" reads a trace file and approximates it by a
predictor: a lookup table that guesses the next instruction based on the
previous instructions. Run it like this:

    $ python3 predictor.py /tmp/myprog.trace 

The result will be written to "/tmp/predictor.pickle".

The script is slow, because it has to replay the whole trace. You may want to
keep a library of predictor files, which are typically small (tens of
kilobytes). It is for this reason that the "predictor.py" script has been
separated out from the rest of the procedure.

Step 3: Labels
--------------

The script "language.py" reads a predictor file and constructs a suitable
control-flow graph for the specialised interpreter. Run it like this:

    $ python3 -i language.py /tmp/predictor.pickle 

The result will be written to "/tmp/labels.pickle".

The script is fast, but it has nonetheless been separated out from the rest of
the procedure, so that it is possible to generate "labels.pickle" files in
other ways, if desired, or to distribute them.

Step 4: Actions
---------------

The script "gen-actions" reads a labels file and writes out a fragment of C
source code. Run it like this:

    $ ./gen-actions labels.pickle >instruction-actions.h

Step 5: Make
------------

The SMite source file "step.c" depends on "instruction-actions.h".

    $ make
