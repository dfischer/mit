#!/usr/bin/env python3
#
# (c) Mit authors 2019-2020
#
# The package is distributed under the MIT/X11 License.
#
# THIS PROGRAM IS PROVIDED AS IS, WITH NO WARRANTY. USE IS AT THE USERâ€™S
# RISK.

import sys, functools, heapq, argparse, random, pickle
from pprint import pprint

from spec import Instruction, GUESS_LIMITING
from path import Path
import profile


# Command-line arguments.
parser = argparse.ArgumentParser(
    prog='simulate-jit',
    description="Experimental algorithm for incremental compilation.",
)
parser.add_argument(
    '--verbose',
    action='store_true',
    help='output diagnostics',
)
parser.add_argument(
    '--labels',
    type=int,
    default=400,
    metavar='N',
    help='generate approximately N labels',
)
parser.add_argument(
    '--svg-file',
    metavar='SVG-FILENAME',
    help='write a control flow diagram',
)
parser.add_argument(
    'profile_filename',
    metavar='PROFILE-FILENAME',
    help='profile file to read',
)
parser.add_argument(
    'labels_filename',
    metavar='LABELS-FILENAME',
    help='labels file to write',
)
args = parser.parse_args()


# Load profile file.

profile.load(args.profile_filename)


class Label:
    '''
    A simulated code address (as if compiled by the JIT). Each Label has a
    Path, defined to be the shortest sequence of Instructions that
    takes the interpreter from `ROOT_LABEL` to this Label.

    At each Label, we count how many times each Instruction follows
    it. This is the basis of a policy to decide when to construct a new Label.

    Invariants:
     - UNIQUE - There is at most one Label for each Path.
     - RIGHT - If a Label exists for a non-empty path `p`, then a Label exists
       for path `p[:-1]`.
     - LEFT - If Labels exist for paths `p` and `q`, then a Label exists for
       the longest common suffix of `p` and `q`.

    Public fields:
     - path - Path - the canonical name of this Label.
     - right_parent - the Label whose `path` is `self.path[:-1]` (`None` for
       `ROOT_LABEL`).
     - right_children - dict from Instruction to Label - the Labels
       of which `self` is the `right_parent`.
     - left_ancestor - the Label whose `path` is `self.path[n:]` for the
       smallest `n>0` (`None` for `ROOT_LABEL`).
     - left_descendants - dict from Instruction to Label - the Labels
       of which `self` is the `left_ancestor`. Note that by "LEFT" the key is a
       single Instruction.
     - counts - dict from Instruction to int - Until
       `right_children[i]` is created, `counts[i]` is the number of times this
       Label is followed by the Instruction `i`. We don't bother to
       count thereafter.
    '''
    ALL = []

    def __init__(self, path, right_parent, left_ancestor):
        assert isinstance(path, Path)
        self.path = path
        self.right_parent = right_parent
        self.left_ancestor = left_ancestor
        self.right_children = {}
        self.left_descendants = {}
        self._right_children_of_left_descendants = set() # of Instruction.
        self.counts = {i: 0 for i in Instruction}
        if args.verbose:
            print('Constructing {!r}'.format(self))
            print('    right_parent = {!r}'.format(right_parent))
            print('    left_ancestor = {!r}'.format(left_ancestor))
        if self.is_root():
            # Check the invariants.
            assert right_parent is None
            assert left_ancestor is None
        else:
            # Check the invariants.
            # `right_parent` is the immediate prefix. Implies RIGHT.
            assert path[:-1] == right_parent.path
            # UNIQUE.
            right_key = path[-1]
            assert right_key not in right_parent.right_children
            # `left_ancestor` is a suffix.
            assert left_ancestor.path.is_proper_suffix_of(path)
            # `left_ancestor` is the longest suffix.
            # Also, LEFT.
            left_key = left_ancestor.path._end_of_prefix(path)
            left_descendant = left_ancestor.left_descendants.get(left_key)
            if left_descendant is not None:
                assert path.is_proper_suffix_of(left_descendant.path)
            # Update the connections.
            right_parent.right_children[right_key] = self
            left_ancestor.left_descendants[left_key] = self
            if left_descendant is not None:
                left_key2 = path._end_of_prefix(left_descendant.path)
                left_descendant.left_ancestor = self
                self.left_descendants[left_key2] = left_descendant
                self._right_children_of_left_descendants.update(
                    left_descendant._right_children_of_left_descendants)
            # Update `_right_children_of_left_descendants` recursively.
            label = right_parent
            while (
                label is not None and
                right_key not in label._right_children_of_left_descendants
            ):
                label._right_children_of_left_descendants.add(right_key)
                label = label.left_ancestor
        # Add `self` to `ALL`.
        Label.ALL.append(self)

    def __repr__(self):
        return 'Label({})'.format(
            ' '.join(instruction.name for instruction in self.path)
        )

    COMPILE_THRESHOLD = 10

    def is_root(self):
        '''
        Returns `true` if `self` is a root Label.
        '''
        return len(self.path) == 0

    def construct(self, instruction):
        '''
        Construct and return a Label with path `self.path + (instruction,)`.
        It will become `self.right_children[instruction]`.
        If necessary, construct an additional Label to serve as the
        `left_ancestor` of the new Label.
        '''
        assert instruction not in self.right_children
        new_path = self.path + (instruction,)
        # Search for a left ancestor of `self`
        # with a right child for `instruction`.
        left_ancestor = self.left_ancestor
        while left_ancestor is not None:
            other = left_ancestor.right_children.get(instruction)
            if other is not None:
                left_key = left_ancestor.path._end_of_prefix(self.path)
                break
            left_ancestor = left_ancestor.left_ancestor
        else:
            other = ROOT_LABEL
            left_key = instruction
        similar = other.left_descendants.get(left_key)
        if similar is not None:
            # `similar` has a similar path to `new_path`
            # and already ends with `instruction`.
            # Find the common suffix of `similar.path` and `new_path`.
            left_ancestor = similar.right_parent.left_ancestor
            while not left_ancestor.path.is_suffix_of(self.path):
                left_ancestor = left_ancestor.left_ancestor
            common_path = left_ancestor.path + (instruction,)
            assert common_path.is_suffix_of(new_path)
            assert common_path.is_proper_suffix_of(similar.path)
            assert instruction not in left_ancestor.right_children
            if left_ancestor is not self:
                # To maintain LEFT, we must construct a new Label.
                if args.verbose:
                    print("Constructing common left ancestor")
                    print("other = {}".format(other))
                    print("similar = {}".format(similar))
                other = Label(common_path, left_ancestor, other)
        return Label(new_path, self, other)

    def preguess(self):
        '''
        Returns a tuple of Instruction which will be executed if
        control-flow reaches this Label. Previous Labels can verify the preguess
        at low cost, and must avoid this Label if it is wrong.
        The code at this Label can thereby be optimized.

        The preguess is empty in the following cases:

         - `path` is empty, i.e. this is `ROOT_LABEL`.
         - `path` ends with a `GUESS_LIMITING` Instruction.
         - We do not confidently know the next Instruction. We test 
           this by checking that the right_children of this Label and of all its
           left descendants follow the same Instruction.

        Otherwise:
         - if there is one right child, the preguess is the preguess of that
           child prefixed with the Instruction that leads to it.
         - otherwise, the preguess is that of our left ancestor.
        '''
        if (
            self.is_root() or
            self.path[-1] in GUESS_LIMITING or
            len(self._right_children_of_left_descendants) > 1
        ):
            return ()
        # `right_children` is subset of `_right_children_of_left_descendants`.
        assert len(self.right_children) <= 1
        for instruction, label in self.right_children.items():
            return (instruction,) + label.preguess()
        return self.left_ancestor.preguess()


# The unique Label with an empty Path.
ROOT_LABEL = Label(Path(()), None, None)


# Do the Markov Monte-Carlo simulation.

def run_label(label, instruction):
    '''
    Simulates executing one instruction.
    Returns the next Label.
    '''
    ALLOW_GRIDS = False # Allow grid structures to grow?
    threshold = Label.COMPILE_THRESHOLD
    while True:
        # Does the JIT have specialized code for executing `instruction`
        # from `self`?
        next_label = label.right_children.get(instruction)
        if next_label is not None:
            # Simulate executing the compiled instruction.
            return next_label
        # Should we compile the specialized code that was missing?
        label.counts[instruction] += 1
        if label.counts[instruction] >= threshold and (
            ALLOW_GRIDS or
            label.is_root() or
            len(label.left_ancestor.right_children) > 1 or
            instruction not in label.left_ancestor.right_children
        ):
            # It is time to create a Label for `new_path`.
            # This is rare and can be slow.
            label.construct(instruction)
        # Forget some history, and try again. We want a Label whose `path` is
        # the longest possible suffix of `self.path` (`None` for a root label).
        label = label.left_ancestor
        if label is None:
            # Simulate executing `instruction` using the fall-back interpreter.
            # We just need to advance to the resulting vm_data.State.
            return ROOT_LABEL
        # Increase `threshold` because we prefer to compile new code before
        # forgetting history.
        threshold = Label.COMPILE_THRESHOLD + label.counts[instruction]


random.seed(0)
current_label = ROOT_LABEL
tick_count = 0
for instruction in profile.random_trace():
    if len(Label.ALL) >= args.labels:
        break
    current_label = run_label(current_label, instruction)
    tick_count += 1

for label in Label.ALL:
    # Sanity check the navigation links.
    if not label.is_root():
        right_key = label.path[-1]
        assert label.right_parent.right_children[right_key] is label
        left_key = label.left_ancestor.path._end_of_prefix(label.path)
        assert label.left_ancestor.left_descendants[left_key] is label
    # Sanity check the preguesses.
    assert not set(label.right_children.keys()).difference(
        label._right_children_of_left_descendants
    )
    label_preguess = label.preguess()
    if len(label_preguess) > 0:
        for instruction, child in label.right_children.items():
            assert label_preguess[0] == instruction
            child_preguess = child.preguess()
            assert label_preguess[1:][:len(child_preguess)] == child_preguess
    if label.left_ancestor is not None:
        assert not label._right_children_of_left_descendants.difference(
            label.left_ancestor._right_children_of_left_descendants
        )
        shrink_preguess = label.left_ancestor.preguess()
        assert label_preguess[:len(shrink_preguess)] == shrink_preguess


# Diagnostics.

def write_svg(filename):
    if args.verbose:
        print("Generating '{}'...".format(filename))
    import pydot
    g = pydot.Dot(
        'labels',
        rankdir='LR',
        root=repr(ROOT_LABEL),
        overlap='false',
        K='10',
        #splines='curved', # Don't combine with prog='dot'; see below.
    )
    nodes = {} # Label -> Node
    for i, l in enumerate(Label.ALL):
        n = pydot.Node(
            # EITHER: number the states
            #str(i),
            # OR: name the states.
            '('+' '.join(instruction.name for instruction in l.path)+')',
            shape='star' if l.is_root() else 'ellipse',
            style='filled',
            fillcolor='' if l.is_root()
                else '/pastel19/{}'.format(1 + l.path[-1].opcode % 9),
        )
        nodes[l] = n
        g.add_node(nodes[l])
    for l in Label.ALL:
        for i, l2 in l.right_children.items():
            g.add_edge(pydot.Edge(
                nodes[l],
                nodes[l2],
                color='green',
                #label=i.name,
            ))
        if not l.is_root():
            l2 = l.left_ancestor
            num_shrinks = len(l.path) - len(l2.path)
            g.add_edge(pydot.Edge(
                nodes[l],
                nodes[l2],
                color='red',
                style=('solid' if num_shrinks==1 else 'bold'),
            ))
    # With "prog='dot'" and non-default "splines" some of the arrows are
    # inverted.
    # We think it's https://gitlab.com/graphviz/graphviz/issues/763
    # i.e. not our fault. Works with other engines.
    g.write_svg(filename, prog='dot' if len(Label.ALL)<=200 else 'neato')
    if args.verbose:
        print("Wrote '{}'".format(filename))


# Diagnostic output.

if args.verbose:
    print()
    label_strs = sorted(
        ' '.join(i.name for i in l.path)
        for l in Label.ALL
    )
    pprint(label_strs, width=499)
    print()
    label_reversed_strs = sorted(
        ' '.join(i.name for i in reversed(l.path))
        for l in Label.ALL
    )
    pprint(label_reversed_strs, width=499)
    histogram = [0]*(1 + len(Instruction))
    for l in Label.ALL:
        histogram[len(l.right_children)] += 1
    for i, count in enumerate(histogram):
        print('{} labels have {} right children'.format(count, i))
    print("tick_count = {}".format(tick_count))

if args.svg_file is not None:
    write_svg(args.svg_file)


# Expand each Label into a tree of "if"s.

class State:
    '''
    Represents a Label and a number of incorrect guesses.
     - index - an index into `Label.ALL`.
     - case - the number of wrong guesses, which may be viewed as in index
       into `Label.ALL[index].right_children`.
    '''
    def __init__(self, index, case):
        assert case <= len(Label.ALL[index].right_children)
        self.index = index
        self.case = case

    def __repr__(self):
        return 'State({}, {})'.format(self.index, self.case)

    def __eq__(self, other):
        return self.index == other.index and self.case == other.case

    def __hash__(self):
        return (self.index, self.case).__hash__()


# Map from Label to the corresponding State.
label_to_state = {
    label: State(index, 0)
    for index, label in enumerate(Label.ALL)
}


class Code:
    '''
    Represents an action to perform on reaching a State.
    '''
    pass

class Goto(Code):
    '''
     - target - State - where to go to.
    '''
    def __init__(self, target):
        assert target is None or isinstance(target, State)
        self.target = target

    def __repr__(self):
        return 'goto {}'.format(self.target)

class If(Code):
    '''
     - path - Path - shortest Path from the root to this State. Used to decide
       the calling convention.
     - guess - Instruction - most likely single-instruction
       continuation.
     - c - State - where to go if `guess` is correct.
     - w - State - where to go if `guess` is wrong.
    '''
    def __init__(self, path, guess, c, w):
        assert isinstance(path, Path)
        assert isinstance(guess, Instruction)
        assert c is None or isinstance(c, State)
        assert w is None or isinstance(w, State)
        self.path = path
        self.guess = guess
        self.c = c
        self.w = w

    def __repr__(self):
        return 'if {} goto {} else goto {}'.format(self.guess, self.c, self.w)


# For a Label with `n` right_children, make Codes for `n+1` States.
state_to_code = {}
for index, label in enumerate(Label.ALL):
    assert label_to_state[label].index == index
    # Guess each right child.
    i = 0
    for guess, child in label.right_children.items():
        state_to_code[State(index, i)] = If(
            label.path,
            guess,
            label_to_state.get(child),
            State(index, i + 1),
        )
        i += 1
    state_to_code[State(index, i)] = Goto(
        label_to_state.get(label.left_ancestor),
    )


# Tension branches.

def tension(state):
    '''
    If tempted to jump to `state`, returns a better State to jump to.
    If the returned State is not `None`, the code there will always be an If.
     - state - State
    '''
    if state is None:
        return None
    right_children = list(Label.ALL[state.index].right_children)
    rejects = set(right_children[:state.case])
    while state is not None:
        code = state_to_code[state]
        if isinstance(code, Goto):
            # Follow the Goto.
            state = code.target
        elif isinstance(code, If):
            if code.guess in rejects:
                # "If" condition is always `false`.
                # Follow the "else" branch.
                state = code.w
            else:
                # We've found something worth executing.
                break
        else:
            assert False, "Unknown Code instance"
    return state

state_to_code = {
    state: If(code.path, code.guess, tension(code.c), tension(code.w))
    for state, code in state_to_code.items()
    if isinstance(code, If)
}


# Number reachable states.

reachable_states = [] # list of State.
state_to_number = {s: n for n, s in enumerate(reachable_states)} # Invariant.

def walk(state):
    '''
    Ensures all States reachable from `state` are numbered.
    '''
    if state is None or state in state_to_number:
        return
    number = len(reachable_states)
    if args.verbose:
        print('Allocating number {} for state {}'.format(number, state))
    reachable_states.append(state)
    state_to_number[state] = number
    code = state_to_code[state]
    walk(code.c)
    walk(code.w)

walk(State(0, 0))


# Dump to a file.

# File format is Pickle, with the following contents:
# [(
#     path_instruction_sequence (str, space-separated),
#     preguess_instruction_sequence (str, space-separated),
#     guess (Instruction),
#     if_correct (int?),
#     if_wrong (int?),
# )]

def row_for_state(state):
    code = state_to_code[state]
    label = Label.ALL[state.index]
    return (
        ' '.join(i.name for i in code.path),
        ' '.join(i.name for i in label.preguess()),
        code.guess.name,
        state_to_number.get(code.c),
        state_to_number.get(code.w),
    )

with open(args.labels_filename, 'wb') as f:
    pickle.dump([row_for_state(s) for s in reachable_states], file=f)
if args.verbose:
    print('Wrote {}'.format(args.labels_filename))
