#!/usr/bin/env python3
#
# (c) Mit authors 1994-2020
#
# The package is distributed under the MIT/X11 License.
#
# THIS PROGRAM IS PROVIDED AS IS, WITH NO WARRANTY. USE IS AT THE USERâ€™S
# RISK.

import argparse, json, textwrap

from mit_core.code_util import Code, copyright_banner, disable_warnings
from mit_core.params import opcode_bit
from specializer import CacheState, gen_case
from spec import Instruction
from path import Path, State


GENERATOR_PROGRAM = 'gen-specializer'
PURPOSE = 'Run the virtual machine main loop (optimizing version).'
COPYRIGHT_YEARS = '1994-2019'


# Command-line arguments.
parser = argparse.ArgumentParser(
    prog=GENERATOR_PROGRAM,
    description='Generate optimizing interpreter',
)
parser.add_argument(
    '--no-preguess',
    action='store_true',
    help='disable preguessing',
)
parser.add_argument(
    'labels_filename',
    metavar='LABELS-FILENAME',
    help='labels file to use',
)
args = parser.parse_args()


class Label:
    '''
     - index - int - the index of this Label.
     - name - str - The C identifier of this Label.
     - path - Path - the instruction sequence just executed.
     - preguess - list of Instruction - the longest unique probable
       continuation.
     - guess - Instruction - the most probable next instruction.
     - if_correct - int - the Label index to jump to if `guess` is correct.
     - if_wrong - int - the Label index to jump to if `guess` is wrong.
    '''
    def __init__(
        self,
        index,
        name,
        path=None,
        preguess=None,
        guess=None,
        if_correct=None,
        if_wrong=None,
    ):
        '''
         - path - str (space-separated Instruction names).
         - preguess - str (space-separated Instruction names).
         - guess - str (Instruction name).
        '''
        self.index = index
        self.name = name
        self.path = None if path is None else Path(tuple(
            Instruction[name] for name in path.split()
        ))
        self.preguess = None if preguess is None else [
            Instruction[name] for name in preguess.split()]
        self.guess = None if guess is None else Instruction[guess]
        self.if_correct = if_correct
        self.if_wrong = if_wrong

    def cache_state(self):
        '''Returns a fresh CacheState describing this Label.'''
        return CacheState(self.cached_depth(), self.checked_depth())

    def cached_depth(self):
        return 0 if self.path is None else self.path.state.cached_depth()

    def checked_depth(self):
        return 0 if self.path is None else self.path.state.checked_depth()

    def goto(self, cache_state):
        '''
        Returns a Code to jump to this Label.
         - cache_state - The CacheState before the goto. This method generates
           code to flush the cache to meet the expectations at this Label.
        '''
        code = Code()
        code.extend(cache_state.flush(self.cache_state()))
        code.append('goto {};'.format(self.name))
        return code

    def generate_code(self, profiling=False, no_preguess=False):
        '''
        Returns a Code to place at this Label.
        Also returns the peak value of `CacheState.cached_depth`.
        '''
        # Generate the Code for the branch where `self.guess` is correct.
        c_code = Code()
        if profiling:
            c_code.append('state_guess_correct[{}]++;'.format(self.index))
        state = State(tos_constant=self.path.state.tos_constant)
        cache_state = self.cache_state()
        state = state.step(self.guess)
        c_code.extend(Code('''\
            initial_pc = S->pc;
            initial_ir = S->ir;
            S->ir >>= MIT_OPCODE_BIT;''',
            '{{ // {}'.format(self.guess.name),
                gen_case(self.guess, cache_state),
            '}',
        ))
        c_code.extend(label_by_index(self.if_correct).goto(cache_state))
        pops = -state.stack_min
        pushes = state.stack_max - state.stack_min
        max_cached_depth = (
            max(self.cached_depth(), -state.stack_min) +
            state.stack_max
        )
        # Generate the code for the branch where the guess is wrong.
        w_code = Code()
        if profiling:
            w_code.append('state_guess_wrong[{}]++;'.format(self.index))
        cache_state = self.cache_state()
        w_code.extend(label_by_index(self.if_wrong).goto(cache_state))
        # Compute the bit string of Instruction opcodes to guess.
        opcode_value = 0 # Bit pattern to match.
        opcode_bits = 0 # Number of bits to match.
        multiguess = [self.guess]
        if not no_preguess:
            multiguess.extend(label_by_index(self.if_correct).preguess)
        for instruction in multiguess:
            assert opcode_bits is not None
            opcode_value |= instruction.opcode << opcode_bits
            opcode_bits += opcode_bit
            if instruction.terminal:
                opcode_bits = None # Must match all bits.
        # Generate the guess condition.
        if not no_preguess and self.preguess[:len(multiguess)] == multiguess:
            opcode_test = '1'
        elif opcode_bits is None:
            opcode_test = 'S->ir == {:#x}'.format(opcode_value)
        else:
            mask = (1 << opcode_bits) - 1
            opcode_test = '(S->ir & {:#x}) == {:#x}'.format(mask, opcode_value)
        cache_state = self.cache_state()
        guard_code = self.guess.guard.format(
            stack_0=cache_state.lvalue(0),
            stack_1=cache_state.lvalue(1),
        )
        tests = [
            '({})'.format(opcode_test),
            'likely({})'.format(cache_state.underflow_test(pops)),
            'likely({})'.format(cache_state.overflow_test(pops, pushes)),
            '({})'.format(guard_code),
        ]
        # Generate the main Code.
        code = Code(
            '// History: {}'.format(' '.join(i.name for i in self.path)),
            '// Future: {}'.format(' '.join(i.name for i in self.preguess)),
            'assert(error == MIT_ERROR_INSTRUCTION_COMPLETED);',
            'assert(cached_depth == {});'.format(self.cached_depth()),
            'if ({}) {{'.format(' && '.join(tests)),
            c_code,
            '}',
        )
        code.extend(w_code)
        return (code, max_cached_depth)


# Load the labels file, which tells us what control-flow graph to generate.
with open(args.labels_filename, "rb") as h:
    labels = [
        Label(
            index,
            'A_{}'.format(index),
            obj['path'],
            obj['preguess'],
            obj['guess'],
            obj['if_correct'],
            obj['if_wrong'],
        )
        for index, obj
            in enumerate(json.load(h))
    ]

def label_by_index(index):
    if index is None:
        return Label(len(labels), 'A_FALLBACK')
    return labels[index]


def gen_labels_code(profiling=False):
    code = Code()
    code.append(Code('''\
        mit_uword initial_pc, initial_ir;
        // The number of stack items cached in C variables.
        int cached_depth = 0;

        // Each A_XXX label has an expectation of what instruction sequence
        // probably comes next. If correct, there is a fast path for executing
        // that sequence, otherwise we fall back on a slow path with broader
        // expectations. Ultimately, we fall back to `A_FALLBACK` which calls
        // `mit_single_step()` to handle corner cases.
        //
        // The calling convention at each A_XXX label is as follows:
        //
        //  - On entry, `error` is `MIT_ERROR_INSTRUCTION_COMPLETED`. `cached_depth` is a
        //    compile-time constant indicating how many top stack items are in
        //    C variables.
        //  - Before running the `Instruction.code` for an
        //    instruction, record `initial_pc` and `initial_ir`, and right-shift
        //    `ir`.
        //  - When an error occurs, call `RAISE(code)`.
        //    It sets `error` to the return code; then it resets `pc` and
        //    `ir` to their initial values, and does "goto error".
        //  - On exit, whether by `RAISE` or otherwise, all Mit
        //    registers must be set according to the Mit spec. In particular,
        //    there must be no side effects before a RAISE, except on `ir` and
        //    `pc`, which will be reset as described above.
    '''))
    max_cached_depth = 0
    for label in labels:
        code.append('')
        code.append('{label_name}:'.format(label_name=label.name))
        label_code, cached_depth = label.generate_code(
            profiling,
            args.no_preguess or profiling
        )
        code.append(disable_warnings(
            ['-Wunsafe-loop-optimizations'],
            label_code,
        ))
        max_cached_depth = max(max_cached_depth, cached_depth)
    code.append('')
    code.append('''\
        A_FALLBACK:
            assert(error == MIT_ERROR_INSTRUCTION_COMPLETED);
            assert(cached_depth == 0);
            *real_S = state;
            error = mit_single_step(real_S);
            state = *real_S;
            continue;

        error:
            S->pc = initial_pc;
            S->ir = initial_ir;
            switch (cached_depth) {
    ''')
    switch_code = Code()
    cache_state = CacheState(max_cached_depth, 0)
    while cache_state.cached_depth > 0:
        switch_code.append('case {}:'.format(cache_state.cached_depth))
        case_code = Code()
        case_code.extend(cache_state.flush(cache_state.cached_depth - 1))
        case_code.append('// Falls through.')
        switch_code.append(case_code)
    switch_code.append('''\
        case 0:
            break;
        default:
            assert(0); // Unreachable.
        }
    ''')
    code.append(switch_code)

    return code, max_cached_depth

def gen_body_code(profiling=False):
    code = Code()
    code.append('''\
        mit_state state = *real_S;
        mit_state *const S = &state;
        int error = MIT_ERROR_INSTRUCTION_COMPLETED;
    ''')
    # Generate the code for the labels first, so as to compute
    # `max_cached_depth`.
    labels_code, max_cached_depth = gen_labels_code(profiling)
    if max_cached_depth > 0:
        cache_state = CacheState(max_cached_depth, 0)
        # Initialize the cache variables to avoid (incorrect) uninitialized
        # variable warning.
        code.append('mit_word {};'.format(
            ', '.join(
                '{} = 0'.format(cache_state.var(pos))
                for pos in reversed(range(max_cached_depth))
            )
        ))
    code.append('do {')
    code.extend(labels_code)
    code.append('''\
        } while (error == MIT_ERROR_INSTRUCTION_COMPLETED);
        *real_S = state;
        return error;
    ''')
    return code


# Generate the code for the entire source file.
code = copyright_banner(GENERATOR_PROGRAM, PURPOSE, COPYRIGHT_YEARS)
code.append('''

    #include "config.h"

    #include <assert.h>
    #include <stdio.h>
    #include <unistd.h>

    #include "mit/mit.h"
    #include "mit/features.h"

    #include "run.h"


    #define NUM_LABELS {num_labels}
    // The number of times we guessed correctly at each specializer label.
    static MIT_THREAD_LOCAL unsigned long long state_guess_correct[NUM_LABELS];
    // The number of times we guessed wrong at each specializer label.
    static MIT_THREAD_LOCAL unsigned long long state_guess_wrong[NUM_LABELS];

    // Extra data to be included in profile files.
    static const struct label {{
        const char *path;
        const char *guess;
        int correct_label;
        int wrong_label;
    }} label_data[NUM_LABELS] = {{'''.format(num_labels=len(labels))
)
def label_to_c(l):
    return -1 if l is None else l
code.append(Code(',\n'.join([
    ('{{"{}", "{}", {}, {}}}'.format(
        ' '.join(i.name for i in l.path),
        l.guess.name,
        label_to_c(l.if_correct),
        label_to_c(l.if_wrong),
    ))
    for l in labels
])))
code.append('};')
# Currently, A_FALLBACK is "infectious": if it is used by a particular
# build of mit, then it ends up in the profile file, and therefore
# in successive builds of mit. We add suitable labels in `simulate-jit`
# to compensate; see the definition of `ROOT_LABEL`.
code.append('''
    void mit_profile_reset(void)
    {
        for (unsigned i = 0; i < NUM_LABELS; i++)
            state_guess_correct[i] = state_guess_wrong[i] = 0;
    }

    int mit_profile_dump(int fd)
    {
        // Open output stream (for buffering)
        int dup_fd = dup(fd);
        if (dup_fd == -1)
            return -1;
        FILE *fp = fdopen(dup_fd, "w");
        if (fp != NULL) {
            if (fprintf(fp, "[") < 0)
                goto err;
            const char *sep = "";
            for (unsigned i = 0; i < NUM_LABELS; i++) {
                struct label l = label_data[i];
                if (fprintf(fp,
                        "%s\\n  {"
                            "\\"path\\": \\"%s\\", "
                            "\\"guess\\": \\"%s\\", "
                            "\\"if_correct\\": %d, "
                            "\\"if_wrong\\": %d, "
                            "\\"correct_count\\": %llu, "
                            "\\"wrong_count\\": %llu"
                        "}",
                        sep,
                        l.path,
                        l.guess,
                        l.correct_label,
                        l.wrong_label,
                        state_guess_correct[i],
                        state_guess_wrong[i]
                    ) < 0
                )
                    goto err;
                sep = ",";
            }
            if (fprintf(fp, "\\n]\\n") < 0)
                goto err;
            if (fclose(fp) == 0)
                return 0;
            fp = NULL;
        }
    err:
        if (fp != NULL)
            fclose(fp);
        return -1;
    }
''')

for profiling, fn in [
    (False, 'mit_run_specializer'),
    (True, 'mit_run_profile'),
]:
    code.append('')
    code.append('mit_word {}(mit_state * restrict real_S) {{'.format(fn))
    code.append(gen_body_code(profiling))
    code.append('}')

print(code)
