#!/usr/bin/python3
#
# Copyright (c) 2019 Mit authors
#
# The package is distributed under the MIT/X11 License.
#
# THIS PROGRAM IS PROVIDED AS IS, WITH NO WARRANTY. USE IS AT THE USERâ€™S
# RISK.

import argparse, pickle, json
from pprint import pprint # Convenience for running with `python -i`.

from mit_core.spec import Instruction


# Command-line arguments.
parser = argparse.ArgumentParser(
    prog='mit-profile',
    description='Analyze a profile generated by "mit --profile".',
)
parser.add_argument(
    'profile_file',
    metavar='PROFILE-FILE',
    help='profile file to use',
)
args = parser.parse_args()


class Label:
    '''
    Data about one of the labels in specializer.c.

     - index - int - the index of this Label.
     - path - str - the instruction sequence just executed.
     - guess - str - the most probable next instruction sequence.
       (space-separated).
     - correct_state - int - the Label index to jump to if `guess` is correct,
       or `-1` for `A_FALLBACK`.
     - wrong_state - int - the Label index to jump to if `guess` is wrong,
       or `-1` for `A_FALLBACK`.
     - correct_count - the number of times `guess` was correct.
     - wrong_count - the number of times `guess` was wrong.
    '''
    def __init__(
        self,
        index,
        path,
        guess,
        correct_state,
        wrong_state,
        correct_count,
        wrong_count,
    ):
        self.index = index
        self.path = path
        self.guess = guess
        self.correct_state = correct_state
        self.wrong_state = wrong_state
        self.correct_count = correct_count
        self.wrong_count = wrong_count
        self.total_count = correct_count + wrong_count

    def __repr__(self):
        return 'Label({}, {!r}, {!r}, {}, {}, {}, {})'.format(
            self.index,
            self.path,
            self.guess,
            self.correct_state,
            self.wrong_state,
            self.correct_count,
            self.wrong_count,
        )


# Load the data file.
with open(args.profile_file) as h:
    profile = json.load(h)
labels = [
    Label(
        index,
        profile['path'],
        profile['guess'],
        profile['correct_state'],
        profile['wrong_state'],
        profile['correct_count'],
        profile['wrong_count'],
    )
    for index, profile in enumerate(profile)
]


# Compute totals.
total_count = sum(label.total_count for label in labels)
fallback_count = sum(
    label.correct_count
    for label in labels
    if label.correct_state == -1
) + sum (
    label.wrong_count
    for label in labels
    if label.wrong_state == -1
)
