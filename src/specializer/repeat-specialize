#!/usr/bin/env python3
#
# Copyright (c) 2020 Mit authors
#
# The package is distributed under the MIT/X11 License.
#
# THIS PROGRAM IS PROVIDED AS IS, WITH NO WARRANTY. USE IS AT THE USERâ€™S
# RISK.

import os
import sys
from shutil import copy2
import re
import argparse
import subprocess


# Command-line arguments
parser = argparse.ArgumentParser(
    prog='repeat-specialize',
    description='Repeatedly specialize mit, collecting the profiles and identifying the best.',
)
parser.add_argument('-n', '--times', type=int, metavar='N', default=10,
                    help='run N times [default %(default)s]')
args = parser.parse_args()

# Check required environment variables are set
assert os.getenv('TIME_BINARY') is not None
assert os.getenv('MIT_BINARY') is not None

# Run specializer
def copy_profile(n):
    copy2('specializer/profile.json', f'specializer/profile-{n}.json')

def parse_count(lines):
    for i in range(len(lines)):
        marker = '----'
        if lines[i][:len(marker)] == marker:
            return int(re.search('\d+', lines[i + 1])[0])

best_iteration = 0
best_count = float('inf')
for i in range(args.times):
    copy_profile(i)
    subprocess.check_call(['make', 'specialize-once'])
    subprocess.check_call(['make', 'check', 'TESTS=specializer/build-pforth', 'TIME=' + os.environ['TIME_BINARY']])
    output = subprocess.check_output(['libtool', '--mode=execute', 'opreport',
                                      '--session-dir=./specializer/pforth/src/mit/oprofile_data',
                                      os.environ['MIT_BINARY']], universal_newlines=True)
    count = parse_count(output.splitlines())
    if count < 0.99 * best_count:
        best_count = count
        best_iteration = i + 1
    print(
        f'Iteration {i + 1}: count {count} (best so far iteration ' \
        f'{best_iteration} with count {best_count})',
        file=sys.stderr
    )
copy_profile(args.times)

# Print result and copy best profile to profile.json
print(f'Best iteration was {best_iteration} with count {best_count}', file=sys.stderr)
copy2(f'specializer/profile-{best_iteration}.json', 'specializer/profile.json')
