#!/usr/bin/env python3

import re
import textwrap

from vm_data import Actions


# Variable creator
def make_vars(vars):
    code = []
    for i in vars:
        code.append('smite_WORD {var};'.format(var=i))
    return '\n'.join(code)

def check_stack_pointer(nargs, nresults):
    cond = []
    if nargs > 0:
        cond.append('(S->STACK_DEPTH < {nargs})'.format(nargs=nargs))
    if nresults > nargs:
        cond.append('(S->STACK_DEPTH - {nargs} + {nresults} > S->STACK_SIZE)'.format(nargs=nargs, nresults=nresults))
    if len(cond) > 0:
        return '''\
if ({})
    RAISE(-2);
'''.format("||".join(cond))
    return ""

def load_args(args):
    code = []
    for i in range(len(args)):
        code.append('smite_load_stack(S, {pos}, &{var});'.format(pos=len(args) - i - 1, var=args[i]))
    if len(args) != 0:
        code.append('S->STACK_DEPTH -= {};'.format(len(args)))
    return '\n'.join(code)

def store_results(results):
    code = []
    if len(results) != 0:
        code.append('S->STACK_DEPTH += {};'.format(len(results)))
    for i in range(len(results)):
        code.append('smite_store_stack(S, {pos}, {var});'.format(pos=len(results) - i - 1, var=results[i]))
    return '\n'.join(code)

print('// Auto-generated by gen-actions - DO NOT EDIT.\n')

print('''\
#define RAISE(code)                             \\
        do {                                    \\
            int error = (code);                 \\
            if (error != 0)                     \\
                return error;                   \\
        } while(0)

static int STEP(smite_state *S) {
    S->ITYPE = smite_decode_instruction(S, &S->PC, &S->I);
    trace(S->ITYPE, S->I);

    switch (S->ITYPE) {
    case INSTRUCTION_NUMBER:
        PUSH(S->I);
        break;
    case INSTRUCTION_ACTION:
        switch (S->I) {''')
for (instruction, action) in Actions.__members__.items():
    print('''\
        case O_{instruction}:
            {{
{code}
            }}
            break;'''.format(
                instruction=instruction,
                args=len(action.value.args),
                results=len(action.value.results),
                code=re.sub('\n\n+', '\n', textwrap.indent('\n'.join(['\n'.join([check_stack_pointer(len(action.value.args), len(action.value.results)),
                                                                                 make_vars(action.value.args),
                                                                                 make_vars(action.value.results),
                                                                                 load_args(action.value.args)]),
                                                                      textwrap.dedent(action.value.code.rstrip()),
                                                                      store_results(action.value.results)]), '                '),
                            flags=re.MULTILINE).strip('\n')
            ))
print('''\
        default: /* Undefined instruction */
            return -1;
        }
        break;
    default: /* Error during instruction fetch */
        return S->ITYPE;
    }
    return 0;
}''')
