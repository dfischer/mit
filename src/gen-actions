#!/usr/bin/env python3
# Generate code for instructions.
#
# (c) Reuben Thomas 1994-2019
#
# The package is distributed under the MIT/X11 License.
#
# THIS PROGRAM IS PROVIDED AS IS, WITH NO WARRANTY. USE IS AT THE USERâ€™S
# RISK.

from smite_core import vm_data, action_gen

# Write the output file
print('''\
// Auto-generated by gen-actions - DO NOT EDIT.
// The interface calls single_step() : integer and run() : integer.

#include "config.h"

#include "smite.h"
#include "aux.h"
#include "opcodes.h"
#include "extra.h"

#define RAISE(code)                         \\
    do {                                    \\
        int error = (code);                 \\
        S->STACK_DEPTH = initial_STACK_DEPTH; \\
        S->PC = initial_PC;                 \\
        return error;                       \\
    } while(0)

#define DIVZERO(x)                          \\
    if (x == 0)                             \\
        RAISE(8);

#define TRACE(type, opcode)                 \\
    if (S->trace_fp)                        \\
        fprintf(S->trace_fp, "%"PRI_UWORD" %"PRI_XWORD"\\n", type, (smite_UWORD)opcode);

smite_WORD smite_single_step(smite_state *S) {
    smite_UWORD initial_PC = S->PC;
    smite_UWORD initial_STACK_DEPTH = S->STACK_DEPTH;
    smite_UWORD ITYPE;
    smite_WORD I;
    int res = smite_decode_instruction(S, &S->PC, &ITYPE, &I);
    if (res != 0)
        return res;

    switch (ITYPE) {
    case INSTRUCTION_NUMBER:
        {
            int ret = smite_push_stack(S, I);
            if (ret != 0)
                RAISE(ret);
            break;
        }
    case INSTRUCTION_ACTION:''')

print(action_gen.dispatch(vm_data.Actions, 'O_', '''\
            /* Undefined instruction; try extra instructions */
            {
                int ret = smite_extra(S, I);
                if (ret != 0)
                    RAISE(ret);
            }'''))

print('''
        break;

    default: /* Bug in smite_decode_instruction! */
        return 1;
    }

    TRACE(ITYPE, I);

    return 128;
}


smite_WORD smite_run(smite_state *S)
{
    smite_WORD ret;
    while ((ret = smite_single_step(S)) == 128)
        ;
    return ret;
}''')
