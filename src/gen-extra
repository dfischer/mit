#!/usr/bin/env python3
# Generate code for extra instructions.
#
# (c) Reuben Thomas 1994-2019
#
# The package is distributed under the MIT/X11 License.
#
# THIS PROGRAM IS PROVIDED AS IS, WITH NO WARRANTY. USE IS AT THE USERâ€™S
# RISK.

from smite_core.vm_data_extra import *
from smite_core.action_gen import *

# Write the output file
print('''
#include "config.h"

#include <stdlib.h>
#include <stdbool.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <string.h>
#include "binary-io.h"
#include "verify.h"
#include "minmax.h"

#include "smite.h"
#include "aux.h"
#include "extra.h"
#include "opcodes.h"


#define RAISE(code)                         \
    return (code);                          \

// Assumption for file functions
verify(sizeof(int) <= sizeof(smite_WORD));

// Convert portable open(2) flags bits to system flags
static int getflags(smite_UWORD perm, bool *binary)
{
    int flags = 0;

    switch (perm & 3) {
    case 0:
        flags = O_RDONLY;
        break;
    case 1:
        flags = O_WRONLY;
        break;
    case 2:
        flags = O_RDWR;
        break;
    default:
        break;
    }
    if (perm & 4)
        flags |= O_CREAT | O_TRUNC;

    if (perm & 8)
        *binary = true;

    return flags;
}
''')

for action in LibActions:
    print('''\
static int extra_{}(smite_state *S, smite_WORD I)
{{
'''.format(str.lower(action.name)))
    print(dispatch(action.value.library, '{}_'.format(action.name), '            RAISE(15);'))
    print('''
    return 0;
}
''')

print('''
int smite_extra(smite_state *S, smite_WORD I)
{
''')

print(dispatch(LibActions, '', '''
            return 1;'''))

print('''
    return 0;
}''')
