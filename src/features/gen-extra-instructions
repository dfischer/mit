#!/usr/bin/env python3
# Generate code for extra instructions.
#
# (c) Mit authors 1994-2019
#
# The package is distributed under the MIT/X11 License.
#
# THIS PROGRAM IS PROVIDED AS IS, WITH NO WARRANTY. USE IS AT THE USERâ€™S
# RISK.

from mit_core.instruction_gen import *

# Get type sizes and inject them into instruction_gen
from type_sizes import type_sizes
assert 'mit_word' in type_sizes
word_bytes = type_sizes['mit_word']
type_wordses = {type: (size + word_bytes - 1) // word_bytes
                for type, size in type_sizes.items()}
import mit_core.instruction_gen
mit_core.instruction_gen.type_wordses = type_wordses

from extra_instructions import *

# Write the output file
print('''\
// Auto-generated by gen-extra-instructions - DO NOT EDIT.
// Run the virtual machine.
''')

print(includes)

print('''
#include "mit/extra-opcodes.h"

enum {
    MIT_ERR_EXT_INVALID_LIBRARY = 16,
    MIT_ERR_EXT_INVALID_FUNCTION = 17,
};

#define RAISE(code)                         \\
    return (code);                          \\
''')

for lib in LibInstruction:
    print('''\
static mit_word extra_{}(mit_state * restrict S, mit_word opcode)
{{'''.format(str.lower(lib.name)))
    print(dispatch(
        lib.library,
        '{}_'.format(lib.name),
        '            RAISE(MIT_ERR_EXT_INVALID_FUNCTION);'))
    print('''
    return MIT_ERR_OK;
}
''')

print('''
mit_word mit_extra_instruction(mit_state * restrict S)
{
    mit_uword opcode = S->I >> mit_instruction_bit;
''')

print(dispatch(
    LibInstruction,
    '',
    '\n            return MIT_ERR_EXT_INVALID_LIBRARY;',
))

print('''
    return MIT_ERR_OK;
}''')
