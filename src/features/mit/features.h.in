// Mit features header file
//
// (c) Mit authors 2019-2020
//
// The package is distributed under the MIT/X11 License.
//
// THIS PROGRAM IS PROVIDED AS IS, WITH NO WARRANTY. USE IS AT THE USERâ€™S
// RISK.

#ifndef MIT_WORD_BYTES
#error "mit/mit.h must be included before this header file"
#endif


#ifndef MIT_FEATURES
#define MIT_FEATURES

int mit_argc(void);
/* Return the registered value of `argc`. */
const char *mit_argv(int arg);
/* Return the `arg`th argument, or `NULL`. */
int mit_register_args(int argc, const char *argv[]);
/* Register command-line arguments for the process, which can be
   retrieved using the `ARGC` and `ARG` functions of the `LIBC` extra
   instruction (see `extra_instructions.py`).

   - argc, argv - as for `main`.

    Return MIT_ERROR_OK if `argv` has at least `argc` non-NULL entries.
*/

mit_word mit_extra_instruction(mit_state * restrict S);

const char *mit_core_dump(mit_state *S);
/* Save an object file for the current state, returning the filename on
   success, or NULL otherwise.
*/

mit_word mit_specializer_run(mit_state * restrict S);
/* Like `mit_run`, but (hopefully) faster. */

// N.B. The profiler is global to the process.
void mit_profile_init(void);
/* Initialize the profiler. Must be called before `mit_profile_run` or
   `mit_profile_dump`. */
mit_word mit_profile_run(mit_state * restrict S);
/* Like `mit_specializer_run`, but record profiling information. */
int mit_profile_dump(int fd);
/* Dump profiling information to file descriptor `fd`. */

mit_word mit_step_to(mit_state * restrict S, mit_uword *n, mit_uword addr, int auto_NEXT);

#endif
