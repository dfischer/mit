# Features Makefile.am
#
# (c) Mit authors 2019
#
# The package is distributed under the MIT/X11 License.
#
# THIS PROGRAM IS PROVIDED AS IS, WITH NO WARRANTY. USE IS AT THE USERâ€™S
# RISK.

lib_LTLIBRARIES += libmitfeatures@PACKAGE_SUFFIX@.la
libmitfeatures@PACKAGE_SUFFIX@_la_SOURCES =
nodist_libmitfeatures@PACKAGE_SUFFIX@_la_SOURCES =
libmitfeatures@PACKAGE_SUFFIX@_la_LIBADD = libmit@PACKAGE_SUFFIX@.la $(top_builddir)/lib/libgnu.la
libmitfeatures@PACKAGE_SUFFIX@_la_LDFLAGS = -no-undefined -export-symbols-regex '^mit_.*'

mit_pkginclude_HEADERS += %D%/mit/features.h

$(libmitfeatures@PACKAGE_SUFFIX@_la_SOURCES): include/mit/mit.h

%D%/mit/features.h: $(top_builddir)/config.status %D%/mit/features.h.in
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@


# Simple features

libmitfeatures@PACKAGE_SUFFIX@_la_SOURCES += \
	%D%/args.c \
	%D%/auto-extend.c \
	%D%/core-dump.c \
	%D%/predictor.c \
	%D%/step_to.c

%D%/args.lo: %D%/mit/extra-opcodes.h


# Library extra instructions

nodist_mit_pkginclude_HEADERS += %D%/mit/extra-opcodes.h
libmitfeatures@PACKAGE_SUFFIX@_la_SOURCES += %D%/extra-instructions.c

# Note: we grep config.log because the generated header file has the symbols
# sorted lexically, and we need the output in the same order as the input.
%D%/type_sizes.py: $(top_builddir)/config.status %D%/gen-type-sizes %D%/collate-type-sizes include/mit/registers.h %D%/extra_instructions.py mit_core/instruction.py
	cd %D% && \
	$(PYTHON_WITH_PATH) $(abs_srcdir)/%D%/gen-type-sizes > type-sizes.ac && \
	autoconf type-sizes.ac > type-sizes && \
	CONFIG_SITE= CC="$(CC)" CPPFLAGS="$(CPPFLAGS) -I$(abs_builddir)/%D% -I$(abs_srcdir)/%D% -I$(abs_top_builddir) $(AM_CPPFLAGS)" $(SHELL) type-sizes && \
	$(GREP) "^#define SIZEOF" config.log | cut -d " " -f 3 | \
		( $(PYTHON_WITH_PATH) $(abs_srcdir)/%D%/collate-type-sizes > type_sizes.py ) || ( rm -f type-sizes.ac type-sizes type_sizes.py; exit 1 )

%D%/extra-instructions.c: %D%/gen-extra-instructions %D%/mit/features.h %D%/mit/extra-opcodes.h %D%/extra_instructions.py mit_core/instruction.py mit_core/instruction_gen.py %D%/type_sizes.py
	cd %D% && \
	$(PYTHON_WITH_PATH) $(abs_srcdir)/%D%/gen-extra-instructions > extra-instructions.c || ( rm -f extra-instructions.c; exit 1 )

%D%/mit/extra-opcodes.h: %D%/gen-extra-opcodes %D%/extra_instructions.py mit_core/instruction.py mit_core/instruction_gen.py
	$(MKDIR_P) %D%/mit && \
	cd %D% && \
	$(PYTHON_WITH_PATH) $(abs_srcdir)/%D%/gen-extra-opcodes > mit/extra-opcodes.h || ( rm -f mit/extra-opcodes.h; exit 1 )

EXTRA_DIST += \
	%D%/extra_instructions.py \
	%D%/gen-extra-instructions \
	%D%/gen-extra-opcodes \
	%D%/gen-type-sizes \
	%D%/collate-type-sizes

DISTCLEANLOCALDIRS += %D%/autom4te.cache %D%/__pycache__

DISTCLEANFILES += \
	%D%/mit/extra-opcodes.h \
	%D%/extra-instructions.c \
	%D%/type-sizes.ac \
	%D%/type-sizes \
	%D%/config.log \
	%D%/type_sizes.py


# Specializer

nodist_libmitfeatures@PACKAGE_SUFFIX@_la_SOURCES += %D%/specializer.c

TEST_EXTENSIONS = .pforth
PFORTH_LOG_COMPILER = $(SHELL)
TESTS_ENVIRONMENT = \
	export abs_top_srcdir="$(abs_top_srcdir)" \
	export TIME_BINARY="$(TIME)"; \
	export MIT_BINARY="$(MIT_BINARY)";
bench:
	$(MAKE) check TESTS="$(BENCH_TESTS)"

if USING_PFORTH
features/pforth/config.status: features/pforth/configure
features/pforth/configure:
	cd features/pforth && \
	autoreconf -i && \
	./configure --build=mit BUILD_EXECUTOR=$(MIT_BINARY)
check_DATA = features/pforth/config.status

TESTS = \
	%D%/build-pforth.pforth

BENCH_TESTS = \
	%D%/pforth-bench.pforth
endif

# Alternative predictor-building arguments:
PREDICTOR_PFORTH_ARGS=--evaluate BYE
#PREDICTOR_PFORTH_ARGS=make-base.fs
#PREDICTOR_PFORTH_ARGS=tests.fs # (needs something on standard input)
build-predictor: libmitfeatures@PACKAGE_SUFFIX@.la $(MIT_BINARY)
	export LD_LIBRARY_PATH=$(abs_top_builddir)/src/@objdir@:$(abs_top_builddir)/src/%D%/@objdir@:$$LD_LIBRARY_PATH; \
	cd %D%/pforth/src/mit && \
	$(MIT_BINARY) --predictor=$(abs_srcdir)/%D%/instructions_predictor.json pforth-base $(PREDICTOR_PFORTH_ARGS)

%D%/instructions_labels.pickle: mit_core/code_util.py mit_core/params.py mit_core/instruction.py mit_core/vm_data.py %D%/instructions_predictor.json %D%/gen-labels %D%/path.py %D%/futures.py
	$(PYTHON_WITH_PATH) $(srcdir)/%D%/gen-labels $(srcdir)/%D%/instructions_predictor.json $@

%D%/specializer.c: mit_core/code_util.py mit_core/instruction.py mit_core/vm_data.py %D%/type_sizes.py mit_core/instruction_gen.py %D%/gen-specializer %D%/specializer.py %D%/instructions_labels.pickle
	$(PYTHON_WITH_PATH) $(srcdir)/%D%/gen-specializer %D%/instructions_labels.pickle > %D%/specializer.c || ( rm -f %D%/specializer.c; exit 1 )

%D%/specializer.lo: include/mit/mit.h %D%/mit/features.h

EXTRA_DIST += \
	%D%/extra_errors.py \
	%D%/path.py \
	%D%/futures.py \
	%D%/specializer.py \
	%D%/gen-labels \
	%D%/gen-specializer \
	%D%/instructions_predictor.json \
	%D%/opcode-frequency

DISTCLEANFILES += \
	%D%/instructions_predictor.json \
	%D%/instructions_labels.pickle \
	%D%/specializer.c
