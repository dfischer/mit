# Features Makefile.am
#
# (c) Mit authors 2019
#
# The package is distributed under the MIT/X11 License.
#
# THIS PROGRAM IS PROVIDED AS IS, WITH NO WARRANTY. USE IS AT THE USERâ€™S
# RISK.

lib_LTLIBRARIES += libmitfeatures@PACKAGE_SUFFIX@.la
libmitfeatures@PACKAGE_SUFFIX@_la_SOURCES =
nodist_libmitfeatures@PACKAGE_SUFFIX@_la_SOURCES =
libmitfeatures@PACKAGE_SUFFIX@_la_LIBADD = libmit@PACKAGE_SUFFIX@.la $(top_builddir)/lib/libgnu.la
libmitfeatures@PACKAGE_SUFFIX@_la_LDFLAGS = -no-undefined -export-symbols-regex '^mit_.*'

mit_pkginclude_HEADERS += %D%/mit/features.h

%D%/mit/features.h: $(top_builddir)/config.status %D%/mit/features.h.in
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@


# Simple features

libmitfeatures@PACKAGE_SUFFIX@_la_SOURCES += \
	%D%/auto-extend.c \
	%D%/trace.c \
	%D%/core-dump.c


# Library extra instructions

nodist_mit_pkginclude_HEADERS += %D%/mit/extra-opcodes.h
libmitfeatures@PACKAGE_SUFFIX@_la_SOURCES += %D%/extra-instructions.c

# Note: we grep config.log because the generated header file has the symbols
# sorted lexically, and we need the output in the same order as the input.
%D%/type_sizes.py: $(top_builddir)/config.status %D%/gen-type-sizes %D%/collate-type-sizes include/mit/registers.h %D%/extra_instructions.py mit_core/instruction.py
	cd %D% && \
	$(PYTHON_WITH_PATH) $(abs_srcdir)/%D%/gen-type-sizes > type-sizes.ac && \
	autoconf type-sizes.ac > type-sizes && \
	CONFIG_SITE= CC="$(CC)" CPPFLAGS="$(CPPFLAGS) -I$(abs_builddir)/%D% -I$(abs_srcdir)/%D% -I$(abs_top_builddir) $(AM_CPPFLAGS)" $(SHELL) type-sizes && \
	$(GREP) "^#define SIZEOF" config.log | cut -d " " -f 3 | \
		( $(PYTHON_WITH_PATH) $(abs_srcdir)/%D%/collate-type-sizes > type_sizes.py ) || ( rm -f type-sizes.ac type-sizes type_sizes.py; exit 1 )

%D%/extra-instructions.c: %D%/gen-extra-instructions %D%/mit/features.h %D%/mit/extra-opcodes.h %D%/extra_instructions.py mit_core/instruction.py mit_core/instruction_gen.py %D%/type_sizes.py
	cd %D% && \
	$(PYTHON_WITH_PATH) $(abs_srcdir)/%D%/gen-extra-instructions > extra-instructions.c || ( rm -f extra-instructions.c; exit 1 )

%D%/mit/extra-opcodes.h: %D%/gen-extra-opcodes %D%/extra_instructions.py mit_core/instruction.py mit_core/instruction_gen.py
	cd %D% && \
	$(MKDIR_P) mit && \
	$(PYTHON_WITH_PATH) $(abs_srcdir)/%D%/gen-extra-opcodes > mit/extra-opcodes.h || ( rm -f mit/extra-opcodes.h; exit 1 )

EXTRA_DIST += \
	%D%/extra_instructions.py \
	%D%/gen-extra-instructions \
	%D%/gen-extra-opcodes \
	%D%/gen-type-sizes \
	%D%/collate-type-sizes

DISTCLEANLOCALDIRS += %D%/autom4te.cache %D%/__pycache__

DISTCLEANFILES += \
	%D%/mit/extra-opcodes.h \
	%D%/extra-instructions.c \
	%D%/type-sizes.ac \
	%D%/type-sizes \
	%D%/config.log \
	%D%/type_sizes.py


# Specializer

nodist_libmitfeatures@PACKAGE_SUFFIX@_la_SOURCES += %D%/specializer.c

check-local:
	if test -d features/pforth -a "$(WORD_BYTES)" = "4" -a "$(ENDISM)" = "0"; then \
	    cd features/pforth && \
	    autoreconf -i && \
	    ./configure --build=mit BUILD_EXECUTOR=$(abs_srcdir)/mit@PACKAGE_SUFFIX@$(EXEEXT) && \
	    cd src/mit && \
	    $(abs_srcdir)/mit@PACKAGE_SUFFIX@$(EXEEXT) -O pforth-base make-base.fs && \
	    cmp pforth-base pforth-new; \
	fi

# Alternative trace-building arguments:
#   --evaluate BYE
#   make-base.fs
#   tests.fs # (needs something on standard input)
build-trace:
	export LD_LIBRARY_PATH=$(abs_top_builddir)/src/@objdir@:$$LD_LIBRARY_PATH; \
	cd %D%/pforth/src/mit && \
	$(PYTHON_WITH_PATH) $(abs_srcdir)/%D%/gen-trace $(abs_srcdir)/%D%/instructions.trace --evaluate BYE && \
	gzip -f $(GZIP_ENV) $(abs_srcdir)/%D%/instructions.trace

%D%/instructions.predictor_pickle: mit_core/instruction.py mit_core/vm_data.py %D%/gen-predictor %D%/instructions.trace.gz
	$(PYTHON_WITH_PATH) $(srcdir)/%D%/gen-predictor $(srcdir)/%D%/instructions.trace.gz $@

%D%/instructions.labels_pickle: mit_core/instruction.py mit_core/vm_data.py %D%/instructions.predictor_pickle %D%/gen-labels
	$(PYTHON_WITH_PATH) $(srcdir)/%D%/gen-labels %D%/instructions.predictor_pickle $@

%D%/specializer.c: mit_core/instruction.py mit_core/vm_data.py %D%/type_sizes.py mit_core/code_buffer.py mit_core/instruction_gen.py %D%/gen-specializer %D%/specializer.py %D%/instructions.labels_pickle
	$(PYTHON_WITH_PATH) $(srcdir)/%D%/gen-specializer %D%/instructions.labels_pickle > %D%/specializer.c || ( rm -f %D%/specializer.c; exit 1 )

EXTRA_DIST += \
	%D%/specializer.py \
	%D%/gen-trace \
	%D%/gen-labels \
	%D%/gen-predictor \
	%D%/gen-specializer \
	%D%/instructions.trace.gz

DISTCLEANFILES += \
	%D%/instructions.predictor_pickle \
	%D%/instructions.labels_pickle \
	%D%/specializer.c
