#!/usr/bin/env python3
# Generate extra instruction opcodes list.
#
# (c) Mit authors 2018-2019
#
# The package is distributed under the MIT/X11 License.
#
# THIS PROGRAM IS PROVIDED AS IS, WITH NO WARRANTY. USE IS AT THE USER’S
# RISK.

from mit_core.code_util import Code, enum_to_c
import mit_core.instruction_gen
mit_core.instruction_gen.TYPE_SIZE_UNKNOWN = 0

from extra_instructions import *


code = Code()
code.append('''\
// Auto-generated by gen-extra-opcodes - DO NOT EDIT.
//
// Extra instruction opcodes.
//
// (c) Mit authors 2018-2019
//
// The package is distributed under the MIT/X11 License.
//
// THIS PROGRAM IS PROVIDED AS IS, WITH NO WARRANTY. USE IS AT THE USER’S
// RISK.

#ifndef MIT_EXTRA_OPCODES
#define MIT_EXTRA_OPCODES


#define INSTRUCTION(name, opcode) name = opcode,
''')
code.append('')
code.extend(enum_to_c(LibInstruction, lambda i: i.value[0]))
code.append('')
for lib_instruction in LibInstruction:
    code.extend(enum_to_c(lib_instruction.library, lambda i: i.value[0]))
    code.append('')
code.append('#undef INSTRUCTION')
code.append('')
code.append('#endif')

print(code)
