// Public data structures and interface calls.
// This is the header file to include in programs using Mit.
//
// (c) Mit authors 1994-2020
//
// The package is distributed under the MIT/X11 License.
//
// THIS PROGRAM IS PROVIDED AS IS, WITH NO WARRANTY. USE IS AT THE USERâ€™S
// RISK.

#ifndef MIT_MIT_H
#define MIT_MIT_H


#include <stddef.h>
#include <inttypes.h>
#include <sys/types.h>

// FIXME: For Hash_table; but we can't install hash.h
#include "hash.h"

#include <mit/opcodes.h>


// Thread-local storage
#define MIT_THREAD_LOCAL @THREAD_LOCAL@

// Types and constants
typedef ssize_t mit_word_t;
typedef size_t mit_uword_t;
#define MIT_WORD_BIT (sizeof(mit_word_t) * 8)
#define MIT_UWORD_MAX ((mit_uword_t)-1)

// TODO: find largest type: bigger of long double and intmax_t?
typedef uintmax_t mit_max_stack_item_t;

// The type of a function that mutates the VM stack and memory.
//
// `pc` and `ir` are the initial values of the corresponding registers.
// `stack` is the base address of the stack, which has a capacity of
// `stack_words` words, and `*stack_depth_ptr` is the current stack depth.
// Returns the exit status: `MIT_ERROR_OK` on success, or some other value
// on error.
typedef mit_word_t mit_fn_t(mit_word_t *pc, mit_word_t ir,
                            mit_word_t * restrict stack,
                            mit_uword_t stack_words,
                            mit_uword_t *stack_depth_ptr);

// Stack
// The stack is implemented as a `stack_words`-element array at `stack`.
#define mit_stack_pos(stack, stack_depth, pos) \
    (&stack[stack_depth - (mit_uword_t)(pos) - 1])

// The recommended stack size.
extern MIT_THREAD_LOCAL mit_uword_t mit_stack_words;

// Execute VM code. Defaults to `mit_run_simple`. Can be set to any
// compatible function, which thereby propagates to nested VMs via the `catch`
// extra instruction. This allows a different implementation (optimized,
// profiling) to be used globally.
extern MIT_THREAD_LOCAL mit_fn_t *mit_run;

// Start the execution cycle in the given state as described in the spec.
// If an error is raised, the code is returned.
//
// This is a naive implementation.
mit_fn_t mit_run_simple;

// Like `mit_run_simple`, but (hopefully) faster.
mit_fn_t mit_run_fast;

// The table of traps.
extern MIT_THREAD_LOCAL Hash_table *mit_traps;

// Register a trap module.
int mit_register_trap(const char *file, Hash_table *traps);

// Register installed trap modules.
int mit_register_traps(void);

// N.B. The profiler is per-thread.
// Clear the profile.
void mit_profile_reset(void);
// Like `mit_run_fast`, but records profiling information.
mit_fn_t mit_run_profile;
// Dump profiling information to file descriptor `fd`.
int mit_profile_dump(int fd);

// The callback called by `mit_run_break`. The default is `NULL`, which
// is equivalent to a mit_fn_t that always returns `MIT_ERROR_OK`.
extern MIT_THREAD_LOCAL mit_fn_t *mit_break_fn;
// Like `mit_run_simple`, but calls `mit_break_fn` before each instruction.
mit_fn_t mit_run_break;

// The registered value of `argc`.
extern int mit_argc;
// The registered value of `argv`.
extern char **mit_argv;

#endif
