// Public data structures and interface calls.
// This is the header file to include in programs using Mit.
//
// (c) Mit authors 1994-2019
//
// The package is distributed under the MIT/X11 License.
//
// THIS PROGRAM IS PROVIDED AS IS, WITH NO WARRANTY. USE IS AT THE USER’S
// RISK.

#ifndef MIT_MIT
#define MIT_MIT


#include <stddef.h>
#include <stdint.h>
#include <inttypes.h>
#include <byteswap.h>
#include <limits.h>

#include <mit@PACKAGE_SUFFIX@/opcodes.h>


// Build-time parameters
#define MIT_WORD_BYTES @WORD_BYTES@
#define MIT_ENDISM @ENDISM@
#define MIT_HOST_ENDISM @WORDS_BIGENDIAN@

// Types and constants
#if MIT_WORD_BYTES == 2
#define MIT_WORD_BIT 16
#define MIT_SIZE_WORD 1
#elif MIT_WORD_BYTES == 4
#define MIT_WORD_BIT 32
#define MIT_SIZE_WORD 2
#elif MIT_WORD_BYTES == 8
#define MIT_WORD_BIT 64
#define MIT_SIZE_WORD 3
#elif MIT_WORD_BYTES == 16
#define MIT_WORD_BIT 128
#define MIT_SIZE_WORD 4
/* Given an unsigned 128-bit argument X, return the value corresponding to
   X with reversed byte order.  */
#define bswap_128(x)                                                    \
    (((unsigned __int128)(bswap_64((uint64_t)(x))) << 64) |             \
     ((unsigned __int128)(bswap_64((uint64_t)((x) >> 64)))))

typedef __int128 mit_word;
typedef unsigned __int128 mit_uword;
#else
#error "MIT_WORD_BYTES must be 2, 4, 8 or 16!"
#endif

typedef uint8_t mit_byte;
#define MIT_BYTE_BIT 8
#define MIT_BYTE_MASK ((1 << MIT_BYTE_BIT) - 1)

#define MIT_WORD_MASK ((mit_uword)((mit_word)-1))
#define MIT_UWORD_MAX MIT_WORD_MASK
#define MIT_WORD_MIN ((mit_word)(MIT_UWORD_MAX << (MIT_WORD_BIT - 1)))
#define MIT_WORD_MAX ((mit_word)(MIT_UWORD_MAX >> 1))
#define _reverse_endianness(bits, n) bswap_ ## bits(n)
#define reverse_endianness(bits, n) _reverse_endianness(bits, n)

#if MIT_WORD_BYTES != 16
#define _bits_type_name(prefix, bits) prefix ## bits ## _t
#define bits_type_name(prefix, bits) _bits_type_name(prefix, bits)
typedef bits_type_name(int, MIT_WORD_BIT) mit_word;
typedef bits_type_name(uint, MIT_WORD_BIT) mit_uword;
#endif

// TODO: find largest type: bigger of long double and maxint_t?
// Number in next line is sizeof(size_t)
#if MIT_WORD_BYTES < @SIZEOF_SIZE_T@
typedef size_t mit_max_stack_item_t;
#else
typedef mit_uword mit_max_stack_item_t;
#endif

// Constants (for easy FFI binding)
extern const unsigned mit_word_bytes;
extern const unsigned mit_endism;
extern const unsigned mit_size_word;
extern const unsigned mit_byte_bit;
extern const unsigned mit_byte_mask;
extern const unsigned mit_word_bit;
extern const mit_uword mit_word_mask;
extern const mit_uword mit_uword_max;
extern const mit_word mit_word_min;
extern const mit_word mit_word_max;

// VM registers
typedef struct {
#define R(reg) mit_uword reg;
#include <mit@PACKAGE_SUFFIX@/registers.h>
#undef R
    mit_word * restrict memory;
    mit_uword memory_size;
    mit_word * restrict stack;
    mit_uword stack_size;
    int main_argc;
    char **main_argv;
} mit_state;

#define R(reg)                                          \
    mit_uword mit_get_ ## reg(mit_state *S);            \
    void mit_set_ ## reg(mit_state *S, mit_uword val);
#include <mit@PACKAGE_SUFFIX@/registers.h>
#undef R

// Instructions
#ifndef MIT_INSTRUCTION_BIT
#define MIT_INSTRUCTION_BIT 8
#endif
#if MIT_INSTRUCTION_BIT < 5 || MIT_INSTRUCTION_BIT > 8
#error "MIT_INSTRUCTION_BIT must be in the range 5 to 8 inclusive!"
#endif
#define MIT_INSTRUCTION_MASK ((1 << MIT_INSTRUCTION_BIT) - 1)
extern const unsigned mit_instruction_bit;
extern const unsigned mit_instruction_mask;

// Utility functions
mit_uword mit_align(mit_uword addr, unsigned size);
/* Return `addr` aligned to the next 2^`size`-byte boundary. */

int mit_is_aligned(mit_uword addr, unsigned size);
/* Return 1 if `addr` is a multiple of 2^`size`, or `0` if not. */

// Inline functions
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-function"
_GL_ATTRIBUTE_CONST static mit_uword align(mit_uword addr, unsigned size)
{
    return (addr + ((1 << size) - 1)) & -(1 << size);
}

_GL_ATTRIBUTE_CONST static int is_aligned(mit_uword addr, unsigned size)
{
    return (addr & ((1 << size) - 1)) == 0;
}
#pragma GCC diagnostic pop


// Memory access

uint8_t *mit_native_address_of_range(mit_state *S, mit_uword addr, mit_uword len);
/* Return a host pointer to the VM address `addr`, or `NULL` if any address
   in the range [addr, addr+len] is invalid.
*/

int mit_load(mit_state *S, mit_uword addr, unsigned size, mit_word *val_ptr);
/* Copy 1 << `size` bytes from `addr` to `val_ptr`.

   `size` must be between 0 and log2(MIT_WORD_BYTES) inclusive.
   `addr` must be 1 << `size`-aligned.

   Return 0 if OK, or error code if `addr` is invalid or unaligned.
*/

int mit_store(mit_state *S, mit_uword addr, unsigned size, mit_word val);
/* Store the 1 << `size` least-significant bytes of `val` at virtual address
   `addr`.

   `size` must be between 0 and log2(MIT_WORD_BYTES) inclusive.
   `addr` must be 1 << `size`-aligned.

   Return 0 if OK, or error code if `addr` is invalid or unaligned.
*/

// Inline functions
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-function"
_GL_ATTRIBUTE_PURE static uint8_t *native_address_of_range(mit_state *S, mit_uword addr, mit_uword len)
{
    if (addr >= S->memory_size || len > S->memory_size - addr)
        return NULL;
    return ((uint8_t *)(S->memory)) + addr;
}

static int load(mit_state *S, mit_uword addr, unsigned size, mit_word *val_ptr)
{
    if (addr >= S->memory_size) {
        S->BAD = addr;
        return MIT_ERROR_INVALID_MEMORY_READ;
    }
    if (!is_aligned(addr, size)) {
        S->BAD = addr;
        return MIT_ERROR_UNALIGNED_ADDRESS;
    }

    mit_word val;
    switch (size) {
    case 0:
        val = (mit_uword)*((uint8_t *)S->memory + addr);
        break;
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wcast-align"
    case 1:
        val = (mit_uword)*((uint16_t *)((uint8_t *)S->memory + addr));
        if (MIT_ENDISM != MIT_HOST_ENDISM)
            val = bswap_16(val);
        break;
#if MIT_SIZE_WORD >= 2
    case 2:
        val = (mit_uword)*((uint32_t *)((uint8_t *)S->memory + addr));
        if (MIT_ENDISM != MIT_HOST_ENDISM)
            val = bswap_32(val);
        break;
#if MIT_SIZE_WORD >= 3
    case 3:
        val = (mit_uword)*((uint64_t *)((uint8_t *)S->memory + addr));
        if (MIT_ENDISM != MIT_HOST_ENDISM)
            val = bswap_64(val);
        break;
#if MIT_SIZE_WORD >= 4
    case 4:
        val = (mit_uword)*((unsigned __int128 *)((uint8_t *)S->memory + addr));
        if (MIT_ENDISM != MIT_HOST_ENDISM)
            val = bswap_128(val);
        break;
#endif
#endif
#endif
#pragma GCC diagnostic pop
    default:
        return MIT_ERROR_BAD_SIZE;
    }

    *val_ptr = val;
    return MIT_ERROR_OK;
}

static int store(mit_state *S, mit_uword addr, unsigned size, mit_word val)
{
    if (addr >= S->memory_size) {
        S->BAD = addr;
        return MIT_ERROR_INVALID_MEMORY_WRITE;
    }
    if (!is_aligned(addr, size)) {
        S->BAD = addr;
        return MIT_ERROR_UNALIGNED_ADDRESS;
    }

    switch (size) {
    case 0:
        ((uint8_t *)S->memory)[addr] = (uint8_t)val;
        break;
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wcast-align"
    case 1:
        if (MIT_ENDISM != MIT_HOST_ENDISM)
            val = bswap_16(val);
        *((uint16_t *)((uint8_t *)S->memory + addr)) = (uint16_t)val;
        break;
#if MIT_SIZE_WORD >= 2
    case 2:
        if (MIT_ENDISM != MIT_HOST_ENDISM)
            val = bswap_32(val);
        *((uint32_t *)((uint8_t *)S->memory + addr)) = (uint32_t)val;
        break;
#if MIT_SIZE_WORD >= 3
    case 3:
        if (MIT_ENDISM != MIT_HOST_ENDISM)
            val = bswap_64(val);
        *((uint64_t *)((uint8_t *)S->memory + addr)) = (uint64_t)val;
        break;
#if MIT_SIZE_WORD >= 4
    case 4:
        if (MIT_ENDISM != MIT_HOST_ENDISM)
            val = bswap_128(val);
        *((unsigned __int128 *)((uint8_t *)S->memory + addr)) = (unsigned __int128)val;
        break;
#endif
#endif
#endif
#pragma GCC diagnostic pop
    default:
        return MIT_ERROR_BAD_SIZE;
    }

    return MIT_ERROR_OK;
}
#pragma GCC diagnostic pop


// Stack access

int mit_load_stack(mit_state *S, mit_uword pos, mit_word *val_ptr);
/* Load the word position `pos` on the stack into the word pointed to by
   `val_ptr`.

   Return 0 if OK, or error code if `pos` is invalid.
*/

int mit_store_stack(mit_state *S, mit_uword pos, mit_word val);
/* Store the word `val` into the word at position `pos` on the stack.

   Return 0 if OK, or error code if `addr` is invalid.
*/

int mit_pop_stack(mit_state *S, mit_word *val_ptr);
/* Load the word at position `0` on the stack into the word pointed to by
   `val_ptr`, and decrement `STACK_DEPTH`.

   Return 0 if OK, or error code if position `0` is invalid.
 */

int mit_push_stack(mit_state *S, mit_word val);
/* Increment `STACK_DEPTH`, then store the word `val` value at position 0 on
   the stack.

   Return 0 if OK, or error code if `STACK_DEPTH` is greater than or equal
   to `S->stack_size`.
*/


// Unchecked macro: UNSAFE!
#define UNCHECKED_STACK(pos)                    \
    (S->stack + S->STACK_DEPTH - (pos) - 1)

// Inline functions
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-function"
static int load_stack(mit_state *S, mit_uword pos, mit_word *vp)
{
    if (pos >= S->STACK_DEPTH) {
        S->BAD = pos;
        return MIT_ERROR_INVALID_STACK_READ;
    }

    *vp = *UNCHECKED_STACK(pos);
    return MIT_ERROR_OK;
}

static int store_stack(mit_state *S, mit_uword pos, mit_word v)
{
    if (pos >= S->STACK_DEPTH) {
        S->BAD = pos;
        return MIT_ERROR_INVALID_STACK_WRITE;
    }

    *UNCHECKED_STACK(pos) = v;
    return MIT_ERROR_OK;
}

static int pop_stack(mit_state *S, mit_word *v)
{
    int ret = load_stack(S, 0, v);
    S->STACK_DEPTH--;
    return ret;
}

static int push_stack(mit_state *S, mit_word v)
{
    if (S->STACK_DEPTH >= S->stack_size) {
        S->BAD = S->stack_size;
        return MIT_ERROR_STACK_OVERFLOW;
    }

    (S->STACK_DEPTH)++;
    return store_stack(S, 0, v);
}
#pragma GCC diagnostic pop


// VM instantiation and control

mit_state *mit_init(size_t memory_size, size_t stack_size);
/* Create and initialize a virtual machine state.

   - memory_size - number of words of memory required
   - stack_size - number of words of stack space required

   Return a pointer to a new state, or `NULL` if memory cannot be
   allocated, or if any requested size is larger than `MIT_UWORD_MAX`.

   The memory and stack are zeroed, and the registers are initialized as per
   the spec.
*/

int mit_realloc_memory(mit_state *S, mit_uword memory_size);
/* Resize the memory of a state.

   - state - the state to change
   - memory_size - number of words of memory required

   Return 0 on success, or -1 if the requested memory cannot be allocated.

   Any new memory is zeroed.
*/

int mit_realloc_stack(mit_state *S, mit_uword stack_size);
/* Resize the stack of a state.

   - state - the state to change
   - stack_size - number of words of stack required

   Return 0 on success, or -1 if the requested memory cannot be allocated.

   Any new memory is zeroed.
*/

void mit_destroy(mit_state *S);
/* Destroy the given state, deallocating its memory. */

mit_word mit_run(mit_state * restrict S);
/* Start the execution cycle in the given state as described in the spec.
   If an error is raised, the code is returned.
*/

mit_word mit_single_step(mit_state * restrict S);
/* Execute a single pass of the execution cycle in the given state.
   Return MIT_ERROR_HALT if execution completes without error, or the error
   code.
*/

ptrdiff_t mit_load_object(mit_state *S, mit_uword addr, int fd);
/* Load an object file into a state.

   - state - the state to load into
   - addr - the address at which to load the object file
   - fd - the file descriptor to load from

   Return the number of bytes of code loaded, or one of the following
   errors:

   -1: error reading the object file
   -2: module is invalid
   -3: current implementation is incompatible with the module (for example,
       the word size or `MIT_ENDISM` is incompatible)
   -4: the code will not fit into memory at the address given, or the
       address is out of range or unaligned.

   As an extension to the specification, if an object file starts with the
   ASCII bytes `#!`, then it is assumed to be the start of a UNIX-style
   “hash bang” line, and the file contents up to and including the first
   newline character is ignored.
*/

int mit_save_object(mit_state *S, mit_uword addr, mit_uword len, int fd);
/* Save some memory as an object file.

   - state - the state to save from
   - addr, len - the area of memory to save
   - fd - the file descriptor to save to

   Return 0 on success, or one of the following errors:

   -1: error writing the object file
   -2: `addr` or `len` is invalid
*/

int mit_register_args(mit_state *S, int argc, char *argv[]);
/* Register command-line arguments in the given state, which can be
   retrieved using the `ARGC` and `ARG` functions of the `LIBC` extra
   instruction (see `mit_core/ext.py`).

   - state - the state in which to register the arguments
   - argc, argv - as for `main`.

    Return 0.
*/

mit_word mit_internal_extra_instruction(mit_state *S);
/* Execute an internal instruction, given by `S->I`. */

#if HAVE_ARITHMETIC_RSHIFT
#define ARSHIFT(n, p) \
    ((mit_word)(n) >> (p))
#else
#define ARSHIFT(n, p) \
    (((n) >> (p)) | ((mit_uword)(-((mit_word)(n) < 0)) << (MIT_WORD_BIT - (p))))
#endif
/* Arithmetic right shift `n` by `p` places (the behaviour of >> on signed
   quantities is implementation-defined in C99).
*/

#endif
