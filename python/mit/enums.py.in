# Enumerations from the C API.
#
# (c) Mit authors 2018-2020
#
# The package is distributed under the MIT/X11 License.
#
# THIS PROGRAM IS PROVIDED AS IS, WITH NO WARRANTY. USE IS AT THE USERâ€™S
# RISK.

import os
from enum import Enum, IntEnum, unique

import yaml

from .autonumber import AutoNumber


def enum(enum_name, docstring, spec, value_extractor=lambda x: x):
    '''
    Returns a subclass of IntEnum with elements derived from `spec`.

     - enum_name - str - the class name to define.
     - docstring - str - the docstring for the class.
     - spec - iterable returning (str, t) where `t` is acceptable to
       `value_extractor`.
     - value_extractor - function from `t` to int.
    '''
    enum = unique(IntEnum(
        enum_name,
        ((name, value_extractor(i)) for name, i in spec.items())
    ))
    enum.__doc__ = docstring
    return enum


with open(os.path.join('@pkgdatadir@', 'spec.yaml'), encoding='utf-8') as f:
    spec = yaml.safe_load(f.read())


Registers = unique(AutoNumber(
    'Registers',
    spec['Registers'],
))
Registers.__doc__ = 'VM registers.'

Instructions = enum(
    'Instructions',
    'VM instruction opcodes.',
    spec['Instructions'],
    value_extractor=lambda i: i['opcode'],
)

# The set of opcodes which must be the last in a word.
TERMINAL_OPCODES = frozenset({
    Instructions[name]
    for name, i in spec['Instructions'].items()
    if i.get('terminal') is not None
})

ExtraInstructions = enum(
    'ExtraInstructions',
    'Extra instruction codes.',
    spec['ExtraInstructions'],
    value_extractor=lambda i: i['code'],
)

MitErrorCode = enum(
    'MitErrorCode',
    'VM error codes returned by e.g. `mit_run()`.',
    spec['ErrorCode'],
)
