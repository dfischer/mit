# Enumerations from the C API.
#
# (c) Mit authors 2018-2020
#
# The package is distributed under the MIT/X11 License.
#
# THIS PROGRAM IS PROVIDED AS IS, WITH NO WARRANTY. USE IS AT THE USERâ€™S
# RISK.

import os
from enum import Enum, IntEnum, unique

import yaml

from .autonumber import AutoNumber


def enum(enum_name, docstring, spec, value_extractor=lambda x: x):
    enum = unique(IntEnum(
        enum_name,
        ((name, value_extractor(i)) for name, i in spec.items())
    ))
    enum.__doc__ = docstring
    return enum


with open(os.path.join('@pkgdatadir@', 'mit_spec.yaml'), encoding='utf-8') as f:
    spec = yaml.safe_load(f.read())


Register = unique(AutoNumber(
    'Register',
    spec['Register'],
))
Register.__doc__ = 'VM registers.'

Instruction = enum(
    'Instruction',
    'VM instruction opcodes.',
    spec['Instruction'],
    value_extractor=lambda i: i['opcode'],
)

# The set of opcodes which must be the last in a word.
TERMINAL_OPCODES = frozenset({
    Instruction[name]
    for name, i in spec['Instruction'].items() if i.get('terminal')
})

ExtraInstruction = enum(
    'ExtraInstruction',
    'Extra instruction opcodes.',
    spec['ExtraInstruction'],
    value_extractor=lambda i: i['opcode'],
)

MitErrorCode = enum(
    'MitErrorCode',
    'VM error codes returned by e.g. `mit_run()`.',
    spec['ErrorCode'],
)
