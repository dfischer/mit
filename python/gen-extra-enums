#!/usr/bin/env python3
# Generate extra instructions opcode enums.
#
# (c) Mit authors 2018-2019
#
# The package is distributed under the MIT/X11 License.
#
# THIS PROGRAM IS PROVIDED AS IS, WITH NO WARRANTY. USE IS AT THE USER’S
# RISK.

from mit_core.code_util import Code, enum_to_python
import mit_core.instruction_gen
mit_core.instruction_gen.TYPE_SIZE_UNKNOWN = 0

import extra_instructions


code = Code()
code.append('''\
# Auto-generated by gen-extra-enums - DO NOT EDIT.
#
# Extra instructions enumerations.
#
# (c) Mit authors 2018-2019
#
# The package is distributed under the MIT/X11 License.
#
# THIS PROGRAM IS PROVIDED AS IS, WITH NO WARRANTY. USE IS AT THE USER’S
# RISK.

from enum import Enum, IntEnum, unique
from .autonumber import AutoNumber
''')
code.append('')
code.append('')

lib_code = Code(
    "'''",
    extra_instructions.LibInstruction.__doc__,
    "'''",
    '''\
        def __init__(self, library, opcode):
            self.library = library
            self.opcode = opcode

        def __int__(self):
            return self.opcode
    ''',
)
lib_code.append('')
for lib in extra_instructions.LibInstruction:
    lib_code.append('{} = ({}, {:#x})'.format(
        lib.name,
        lib.library.__name__,
        lib.opcode,
    ))
    code.extend(enum_to_python(lib.library, lambda i: "{:#x}".format(i.value[0])))
    code.append('')
code.append('''\
    @unique
    class LibInstruction(Enum):
''')
code.append(lib_code)

print(code)
